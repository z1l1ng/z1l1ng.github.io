{
  "hash": "49d954c8473c6935859e8ece73cc6300",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Data Acquistion Project\"\nauthor: \"Rain Hartos & Ziling Zhen\"\nsidebar: false\nformat:\n  html: default\n  pdf: default\neditor_options: \n  chunk_output_type: console\n---\n\n\n## Load in Libraries\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(stringr)\nlibrary(rvest)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'rvest'\n\nThe following object is masked from 'package:readr':\n\n    guess_encoding\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(polite)\nlibrary(sf)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLinking to GEOS 3.11.0, GDAL 3.5.3, PROJ 9.1.0; sf_use_s2() is TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(maps)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'maps'\n\nThe following object is masked from 'package:purrr':\n\n    map\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(viridis)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: viridisLite\n\nAttaching package: 'viridis'\n\nThe following object is masked from 'package:maps':\n\n    unemp\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(leaflet)\nlibrary(htmltools)\nlibrary(janitor)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'janitor'\n\nThe following objects are masked from 'package:stats':\n\n    chisq.test, fisher.test\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(httr2)\nlibrary(httr)\nlibrary(lubridate)\nlibrary(tidycensus)\nlibrary(purrr)\n```\n:::\n\n\n## Introduction\n\nFor our project, we decided to scrape data from the wiki pages of one of our favorite video games, *Stardew Valley*. *Stardew Valley* is a popular indie farming game that allows players to take on the role of a character who inherits a run-down farm from their grandfather. In the game, players can grow crops, raise animals, fish, mine, and engage in social activities with the towns people.\n\nFor our project, we were interested in compiling a list of items from the game that can be farmed or collected. The only way to make money from the game is by selling these items, and the price of the item depends on the quality of the item and the profession(s) of the player. Thus, our dataset includes information on the name, category, subcategory, and the different price points of the item depending on item quality (regular, silver, gold, and iridium) and player's profession.\n\n## Approach\n\nAll of our data has been accumulated from the [*Stardew Valley* Wiki](https://stardewvalleywiki.com/Stardew_Valley_Wiki) page. Since each item in the game has a different page and not all of the pages followed a similar structure, we used a combination of harvesting the data in both table form and anywhere on the webpage using rvest with html_text. In the end, we were able to create a dataset from the more important item categories: crops, fish, animal products, and minerals.\n\n### Crops\n\nCrops was the most difficult item to scrape from the wiki, since not all of the pages are structured the same. However, we tried our best to automate where we could.\n\nWe start be getting a list of all the different crops in the game.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#check that we are allowed to scrape the wiki\nrobotstxt::paths_allowed(\"https://stardewvalleywiki.com/Stardew_Valley_Wiki\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\n stardewvalleywiki.com                      \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\nsession <- bow(\"https://stardewvalleywiki.com/Stardew_Valley_Wiki\", force = TRUE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncrops <- bow(\"https://stardewvalleywiki.com/Crops\", force = TRUE)\n\nresult <- scrape(crops) |>\n  html_nodes(css = \"table\") |>\n  html_table(header = TRUE, fill = TRUE)\n\nseasonal_crops <- result[[134]][2] #table of the season crops so we can use that list\n\nseasonal_crops <- seasonal_crops |>\n  mutate(Crops = strsplit(Crops, \" • \", fixed = TRUE)) |>\n  unnest(Crops) |>\n  mutate(Crops = str_replace_all(Crops, \" \", \"_\")) |>\n  distinct(Crops)\n```\n:::\n\n\nCreate our helper functions for crops:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# function for getting the price at a given page and css selector\nget_price <- function(page, css_selector) {\n  page |>\n  html_nodes(css_selector) |>\n  html_text()\n}\n\n# function for creating a tibble of base prices, no profession, for a given crop page\ncrop_base_prices <- function(crop, tiller = FALSE) {\n  url <- str_c(\"https://stardewvalleywiki.com/\", crop)\n  page <- read_html(url)\n  \n  qualities <- c(\"regular\", \"silver\", \"gold\", \"iridium\")\n  prices <- list()\n  \n  for (i in seq_along(qualities)) {\n    if (tiller) {\n      selector <- str_c(\"tr:nth-child(10) td+ td tr:nth-child(\", i, \") td+ td\")\n    } else {\n      selector <- str_c(\"tr:nth-child(10) tr td:nth-child(1) tr:nth-child(\", i, \") td+ td\")\n    }\n    price <- get_price(page, selector)\n    prices[[qualities[i]]] <- parse_number(price)\n  }\n  \n  tibble(\n    item = crop,\n    regular_price = prices$regular,\n    silver_price = prices$silver,\n    gold_price = prices$gold,\n    iridium_price = prices$iridium\n  )\n}\n```\n:::\n\n\nCreate the tibbles for seasonal crops using the helper functions. Note that items 46 (Tea_Leaves), 44(Sweet Gem Berry), 43(Qi_Fruit), 41(Cactus_Fruit), 36(Grape), 4(Coffee_Bean) have issues when using the functions, so we will scrape the data manually without the functions.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# list of all our seasonal crops\nseasonal_crops_list <- pull(seasonal_crops) # list of our crops tibble\n\n# List of crops, excluding those with known issues\nvalid_crops_list <- seasonal_crops_list[-c(46, 44, 43, 41, 36, 4)]\n\n# Base prices without profession\nbase_crop_prices <- valid_crops_list |>\n  purrr::map_dfr(~ crop_base_prices(.x)) |>\n  mutate(profession = as.character(NA))\n\n# Prices with Tiller profession\ntiller_crop_prices <- valid_crops_list |>\n  purrr::map_dfr(~ crop_base_prices(.x, tiller = TRUE)) |>\n  mutate(profession = \"tiller\")\n\n# Combine base and tiller crop prices\nseasonal_crop_prices <- bind_rows(base_crop_prices, tiller_crop_prices)\nseasonal_crop_prices\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 80 × 6\n   item        regular_price silver_price gold_price iridium_price profession\n   <chr>               <dbl>        <dbl>      <dbl>         <dbl> <chr>     \n 1 Blue_Jazz              50           62         75           100 <NA>      \n 2 Carrot                 35           43         52            70 <NA>      \n 3 Cauliflower           175          218        262           350 <NA>      \n 4 Garlic                 60           75         90           120 <NA>      \n 5 Green_Bean             40           50         60            80 <NA>      \n 6 Kale                  110          137        165           220 <NA>      \n 7 Parsnip                35           43         52            70 <NA>      \n 8 Potato                 80          100        120           160 <NA>      \n 9 Rhubarb               220          275        330           440 <NA>      \n10 Strawberry            120          150        180           240 <NA>      \n# ℹ 70 more rows\n```\n\n\n:::\n:::\n\n\nDo the same for non seasonal crops:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Non-seasonal crops list, excluding problematic items\nother_crops <- c(\"Apple\", \"Blackberry\", \"Pomegranate\", \"Wild_Plum\", \"Apricot\", \n                 \"Cherry\", \"Spice_Berry\", \"Peach\", \"Orange\", \"Crystal_Fruit\", \n                 \"Banana\", \"Mango\", \"Fiddlehead_Fern\")[-c(10, 7, 4, 2)]\n\n# Base prices without profession\nbase_other_crops <- other_crops |>\n  purrr::map_dfr(~ crop_base_prices(.x)) |>\n  mutate(profession = as.character(NA))\n\n# Prices with Tiller profession\ntiller_other_crops <- other_crops |>\n  purrr::map_dfr(~ crop_base_prices(.x, tiller = TRUE)) |>\n  mutate(profession = \"tiller\")\n\n# Combine base and tiller prices into one table and arrange by item\nnonseasonal_crop_tbl <- bind_rows(base_other_crops, tiller_other_crops) |>\n  arrange(item)\n```\n:::\n\n\nFinally, create a function for the weird crops that have missing quality or selector path was different\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#function for the crops that do not have different qualities\ncrop_weird_prices <- function(item, selector){\n  url <- str_c(\"https://stardewvalleywiki.com/\", item)\n  page <- read_html(url)\n  regular_price <- get_price(page, selector)\n  \n  tibble(item = item,\n      regular_price = parse_number(regular_price))\n}\n\n#function for the crops that have different qualities. the Berry is for the fruits that have a weird selector that seems to follow a similar pattern.\ncrop_weird_prices_w_quality <- function(crop, tiller = FALSE, berry = FALSE ){\n  url <- str_c(\"https://stardewvalleywiki.com/\", crop)\n  page <- read_html(url)\n  \n  qualities <- c(\"regular\", \"silver\", \"gold\", \"iridium\")\n  prices <- list()\n  \n  for (i in seq_along(qualities)) {\n    if (tiller) {\n      selector <- str_c(\"tr:nth-child(11) td+ td tr:nth-child(\", i, \") td+ td\")\n    } else if (berry){\n      selector <- str_c(\"tr:nth-child(9) tr:nth-child(\", i, \") td+ td\")\n    }else {\n      selector <- str_c(\"tr:nth-child(11) tr td:nth-child(1) tr:nth-child(\", i, \") td+ td\")\n    }\n    price <- get_price(page, selector)\n    prices[[qualities[i]]] <- parse_number(price)\n  }\n  \n  tibble(\n    item = crop,\n    regular_price = prices$regular,\n    silver_price = prices$silver,\n    gold_price = prices$gold,\n    iridium_price = prices$iridium\n  )\n}\n```\n:::\n\n\nNow we make all of the tibbles for the weird crops.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Tea Leaves\nbase_tea_leaves <- crop_weird_prices(\"Tea_Leaves\",\n                                     \"tr:nth-child(10) tr td:nth-child(1) td+ td\")\ntiller_tea_leaves <- crop_weird_prices(\"Tea_Leaves\",\n                                     \"tr:nth-child(10) td+ td td+ td\")\n\ntea_leaves <-bind_rows(base_tea_leaves, tiller_tea_leaves)\n\n# Qi_Fruit\nbase_qi_fruit <-crop_weird_prices(\"Qi_Fruit\",\n                                  \"tr:nth-child(9) tr td:nth-child(1) td+ td\")\ntiller_qi_fruit <-crop_weird_prices(\"Qi_Fruit\",\n                                  \"tr:nth-child(9) td+ td td+ td\")\n\nqi_fruit <-bind_rows(base_qi_fruit, tiller_qi_fruit)\n\n# Cactus fruit\ncactus_fruit <- crop_weird_prices_w_quality(\"Cactus_Fruit\")\ncactus_fruit_tiller <- crop_weird_prices_w_quality(\"Cactus_Fruit\", tiller = TRUE)\n\ncactus_fruit <-bind_rows(cactus_fruit, cactus_fruit_tiller)\n\n# Grape\ngrape <- crop_weird_prices_w_quality(\"Grape\")\ngrape_tiller <- crop_weird_prices_w_quality(\"Grape\", tiller = TRUE)\n\ngrape <-bind_rows(grape, grape_tiller)\n\n# Coffee_bean\ncoffee_bean <- crop_weird_prices_w_quality(\"Coffee_Bean\")\n\n# Wild_plum\nwild_plum <- crop_weird_prices_w_quality(\"Wild_Plum\", berry = TRUE)\n\n# Spice_berry\nspice_berry <- crop_weird_prices_w_quality(\"Spice_Berry\", berry = TRUE)\n\n# Crystal_Fruit\ncrystal_fruit <- crop_weird_prices_w_quality(\"Crystal_Fruit\", berry = TRUE)\n\n# Finally, blackberry is just weird and likes to be different, so we did not use a function for it. \n#Blackberry\n\n# Base\nurl <- str_c(\"https://stardewvalleywiki.com/\", \"Blackberry\")\npage <- read_html(url)\n\nqualities <- c(\"regular\", \"silver\", \"gold\", \"iridium\")\nprices <- list()\n\n# Loop to retrieve and parse prices\nfor (i in seq_along(qualities)) {\n  price <- get_price(page, str_c(\"tr:nth-child(9) tr td:nth-child(1) tr:nth-child(\", i, \") td+ td\"))\n  prices[[qualities[i]]] <- parse_number(price)\n}\n\nblackberry <- tibble(\n  item = \"Blackberry\",\n  regular_price = prices$regular,\n  silver_price = prices$silver,\n  gold_price = prices$gold,\n  iridium_price = prices$iridium\n)\n```\n:::\n\n\nNow, we can combine all of the crop tibbles into one:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# First chunks of crops \ndraft_crops <- bind_rows(seasonal_crop_prices,\n                         nonseasonal_crop_tbl,\n                         tea_leaves, \n                         qi_fruit, \n                         cactus_fruit, \n                         grape, \n                         coffee_bean, \n                         wild_plum, \n                         blackberry, \n                         spice_berry, \n                         crystal_fruit) |>\n  arrange(item)\n```\n:::\n\n\nLastly, we can add in the category variable and the subcategory variable. to makes things easier, we decided the subcategory would be the crop's season. Then, we write it to a csv in case the website changes or updates.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseasons <- result[[134]] %>%\n  select(Season = 1, Crops = 2) |>\n  mutate(Crops = strsplit(Crops, \" • \", fixed = TRUE)) |>\n  unnest(Crops) |>\n  mutate(Crops = str_replace_all(Crops, \" \", \"_\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncrop_prices <- draft_crops |>\n  left_join(seasons, join_by(item == Crops))|>\n   mutate(category = \"crop\",\n          sub_category = str_c(Season, \" Crop\"))|>\n  select(-Season)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in left_join(draft_crops, seasons, join_by(item == Crops)): Detected an unexpected many-to-many relationship between `x` and `y`.\nℹ Row 32 of `x` matches multiple rows in `y`.\nℹ Row 29 of `y` matches multiple rows in `x`.\nℹ If a many-to-many relationship is expected, set `relationship =\n  \"many-to-many\"` to silence this warning.\n```\n\n\n:::\n\n```{.r .cell-code}\n#write.csv(crop_prices, \"crop_prices.csv\")\n\nhead(crop_prices, n = 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 8\n   item  regular_price silver_price gold_price iridium_price profession category\n   <chr>         <dbl>        <dbl>      <dbl>         <dbl> <chr>      <chr>   \n 1 Amar…           150          187        225           300 <NA>       crop    \n 2 Amar…           165          205        247           330 tiller     crop    \n 3 Anci…           550          687        825          1100 <NA>       crop    \n 4 Anci…           605          755        907          1210 tiller     crop    \n 5 Apple           100          125        150           200 <NA>       crop    \n 6 Apple           110          137        165           220 tiller     crop    \n 7 Apri…            50           62         75           100 <NA>       crop    \n 8 Apri…            55           68         82           110 tiller     crop    \n 9 Arti…           160          200        240           320 <NA>       crop    \n10 Arti…           176          220        264           352 tiller     crop    \n# ℹ 1 more variable: sub_category <chr>\n```\n\n\n:::\n:::\n\n\n### Fish\n\nFish was the second most difficult item to scrape from the wiki, since again not all of the pages are structured the same. However, we were able identify 4 different pages in which we could write functions to automate.\n\nWe start be getting a list of all the different fish in the game.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Making sure that this irl is scrapable\nfish <- bow(\"https://stardewvalleywiki.com/Fish\", force = TRUE) \n\n# Scraping table to get a list of all the fish \nresult <- scrape(fish) |>\n  html_nodes(css = \"table\") |>\n  html_table(header = TRUE, fill = TRUE)\n\n# The correct table for the list of fish, and only keeping the names of the fish column\nfishes <- result[[225]][2] \n\n# However, it is formatted very poorly so we need to tidy it up \nfishes <- fishes |>\n  mutate(Fish = strsplit(Fish, \" • \", fixed = TRUE)) |>\n  unnest(Fish) |>\n  # splitting the string since \" • \" was used to separate all fish\n  mutate(Fish = str_replace_all(Fish, \" \", \"_\")) |> \n  distinct(Fish) |>\n  # this is a fish that is in the data set twice but with different spacing \n  filter(Fish != \"_Super_Cucumber\") \n\n# This is a tibble with the subcategories of the fish and the fish name for joining later\nsubcategory <- result[[225]] |> \n  select(Location = 1, Fish = 2) |> \n  mutate(Fish = strsplit(Fish, \" • \", fixed = TRUE)) |> \n  unnest(Fish) |>\n  mutate(Fish = str_replace_all(Fish, \" \", \"_\"))\n```\n:::\n\n\nCreate our helper functions for fish:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# function for getting the price at a given page and css selector\nget_price <- function(page, css_selector) {\n  page |>\n  html_nodes(css_selector) |>\n  html_text()\n}\n\n# function for creating a tibble of prices for a given fish\n\n# this functions output a tibble of our fish \n# and the 4 different prices of the fish dependent on quality\n\n# fish_base_prices takes our fish name, \n# and takes a profession if we specify true or false, \n# as well as the \"nthchild_num\" value for where the price is being store on that website\n\nfish_base_prices <- function(fish, fisher = FALSE, angler = FALSE, nthchild_num) {\n  url <- str_c(\"https://stardewvalleywiki.com/\", fish)\n  page <- read_html(url)\n  \n  qualities <- c(\"regular\", \"silver\", \"gold\", \"iridium\")\n  prices <- list()\n  \n  for (i in seq_along(qualities)) {\n    if (fisher) {\n      selector <- str_c(\"tr:nth-child(\", nthchild_num,\") tr td:nth-child(2) tr:nth-child(\", i, \") td+ td\")\n    } else if (angler) {\n      selector <- str_c(\"tr:nth-child(\", nthchild_num,\") tr td:nth-child(3) tr:nth-child(\", i, \") td+ td\")\n    } \n    else {\n      selector <- str_c(\"tr:nth-child(\", nthchild_num,\") tr td:nth-child(1) tr:nth-child(\", i, \") td+ td\")\n    }\n    price <- get_price(page, selector)\n    prices[[qualities[i]]] <- parse_number(price)\n  }\n  \n  tibble(\n    item = fish,\n    regular_price = prices$regular,\n    silver_price = prices$silver,\n    gold_price = prices$gold,\n    iridium_price = prices$iridium\n  )\n}\n```\n:::\n\n\nAs well as the function for the fish with a different webpage format.\n \n\n::: {.cell}\n\n```{.r .cell-code}\n# this functions output a tibble of our fish, \n# and the 2 different prices of the fish dependent on quality\n\n# fish_base_prices takes our fish name, \n# and takes a profession if we specify true or false, \n# as well as the \"nthchild_num\" value for where the price is being store on that website\n\nfish_base_prices2 <- function(fish, fisher = FALSE, angler = FALSE, nthchild_num) {\n  url <- str_c(\"https://stardewvalleywiki.com/\", fish)\n  page <- read_html(url)\n  \n  qualities <- c(\"regular\", \"silver\", \"gold\", \"iridium\")\n  prices <- list()\n  \n  for (i in seq_along(qualities)) {\n    if (fisher) {\n      selector <- str_c(\"tr:nth-child(\", nthchild_num,\") tr td:nth-child(2) tr:nth-child(\", i, \") td+ td\")\n    } else if (angler) {\n      selector <- str_c(\"tr:nth-child(\", nthchild_num,\") tr td:nth-child(3) tr:nth-child(\", i, \") td+ td\")\n    } \n    else {\n      selector <- str_c(\"tr:nth-child(\", nthchild_num,\") tr td:nth-child(1) tr:nth-child(\", i, \") td+ td\")\n    }\n    price <- get_price(page, selector)\n    prices[[qualities[i]]] <- parse_number(price)\n  }\n  \n  tibble(\n    item = fish,\n    regular_price = prices$regular,\n    silver_price = prices$silver,\n  )\n}\n```\n:::\n\n\nNow, we will load in our fishes lists so for the type of webpage format they have and then apply our function to the fishes to find their prices.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfishes_list <- pull(fishes) # List of our fishes tibble to view, then dividing up the fish by their website format\n\n# Loading in the fish we know that are tr:nth-child(14) in the html (these fishes were found in the Fish QMD when first exploring and getting to know our website)\nfishfor14 <- readRDS(\"~/SDS264/Class Files/MiniProject2/fishfor14.RDS\")\nfishfor14\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"Mutant_Carp\"      \"Radioactive_Carp\" \"Albacore\"         \"Anchovy\"         \n [5] \"Eel\"              \"Flounder\"         \"Halibut\"          \"Herring\"         \n [9] \"Octopus\"          \"Pufferfish\"       \"Red_Mullet\"       \"Red_Snapper\"     \n[13] \"Sardine\"          \"Sea_Cucumber\"     \"Squid\"            \"Super_Cucumber\"  \n[17] \"Tilapia\"          \"Tuna\"             \"Bream\"            \"Catfish\"         \n[21] \"Chub\"             \"Dorado\"           \"Goby\"             \"Lingcod\"         \n[25] \"Perch\"            \"Pike\"             \"Rainbow_Trout\"    \"Salmon\"          \n[29] \"Shad\"             \"Smallmouth_Bass\"  \"Sunfish\"          \"Tiger_Trout\"     \n[33] \"Walleye\"          \"Bullhead\"         \"Carp\"             \"Largemouth_Bass\" \n[37] \"Midnight_Carp\"    \"Sturgeon\"         \"Woodskip\"         \"Ghostfish\"       \n[41] \"Ice_Pip\"          \"Stonefish\"        \"Sandfish\"         \"Slimejack\"       \n[45] \"Void_Salmon\"      \"Blobfish\"         \"Midnight_Squid\"   \"Spook_Fish\"      \n[49] \"Blue_Discus\"      \"Lionfish\"         \"Stingray\"        \n```\n\n\n:::\n\n```{.r .cell-code}\n# Loading in the fish we know that are tr:nth-child(15) in the html, same as above\nfishfor15 <- readRDS(\"~/SDS264/Class Files/MiniProject2/fishfor15.RDS\")\nfishfor15\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"Angler\"             \"Crimsonfish\"        \"Glacierfish\"       \n [4] \"Glacierfish_Jr.\"    \"Legend\"             \"Legend_II\"         \n [7] \"Ms._Angler\"         \"Son_of_Crimsonfish\" \"Lava_Eel\"          \n[10] \"Scorpion_Carp\"     \n```\n\n\n:::\n\n```{.r .cell-code}\n# Loading in the fish we know that are tr:nth-child(10) in the html, same as above\nfishfor10 <- readRDS(\"~/SDS264/Class Files/MiniProject2/fishfor10.RDS\")\nfishfor10 \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Clam\"   \"Cockle\" \"Mussel\" \"Oyster\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# Loading in the fish we know that are tr:nth-child(10) in the html, same as above\nfishleft <- readRDS(\"~/SDS264/Class Files/MiniProject2/fishleft.RDS\")\nfishleft\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Crab\"       \"Crayfish\"   \"Lobster\"    \"Periwinkle\" \"Shrimp\"    \n[6] \"Snail\"     \n```\n\n\n:::\n\n```{.r .cell-code}\n# Creating list of tbl's to store prices so that we can bind into one big tibble\nfish_prices <- vector(\"list\", length = 12)\n\n# Base prices without profession for tr:nth-child(14)\nfish_prices[[1]] <- fishfor14 |>\n  purrr::map_dfr(~ fish_base_prices(.x, nthchild_num = 14)) |>\n  mutate(profession = as.character(NA))\n\n# Prices with Fisher profession\nfish_prices[[2]] <- fishfor14 |>\n  purrr::map_dfr(~ fish_base_prices(.x, fisher = TRUE, nthchild_num = 14)) |>\n  mutate(profession = \"fisher\")\n\n# Prices with Angler profession\nfish_prices[[3]] <- fishfor14 |>\n  purrr::map_dfr(~ fish_base_prices(.x, angler = TRUE, nthchild_num = 14)) |>\n  mutate(profession = \"angler\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Base prices without profession for tr:nth-child(15)\nfish_prices[[4]] <- fishfor15 |>\n  purrr::map_dfr(~ fish_base_prices(.x, nthchild_num = 15)) |>\n  mutate(profession = as.character(NA))\n\n# Prices with Fisher profession\nfish_prices[[5]] <- fishfor15 |>\n  purrr::map_dfr(~ fish_base_prices(.x, fisher = TRUE, nthchild_num = 15)) |>\n  mutate(profession = \"fisher\")\n\n# Prices with Angler profession\nfish_prices[[6]] <- fishfor15 |>\n  purrr::map_dfr(~ fish_base_prices(.x, angler = TRUE, nthchild_num = 15)) |>\n  mutate(profession = \"angler\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Base prices without profession for tr:nth-child(10)\nfish_prices[[7]] <- fishfor10 |>\n  purrr::map_dfr(~ fish_base_prices(.x, nthchild_num = 10)) |>\n  mutate(profession = as.character(NA))\n\n# Prices with Fisher profession\nfish_prices[[8]] <- fishfor10 |>\n  purrr::map_dfr(~ fish_base_prices(.x, fisher = TRUE, nthchild_num = 10)) |>\n  mutate(profession = \"fisher\")\n\n# Prices with Angler profession\nfish_prices[[9]] <- fishfor10 |>\n  purrr::map_dfr(~ fish_base_prices(.x, angler = TRUE, nthchild_num = 10)) |>\n  mutate(profession = \"angler\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Base prices without profession for tr:nth-child(10) but only two qualities\nfish_prices[[10]] <- fishleft |>\n  purrr::map_dfr(~ fish_base_prices2(.x, nthchild_num = 10)) |>\n  mutate(profession = as.character(NA))\n\n# Prices with Fisher profession\nfish_prices[[11]] <- fishleft |>\n  purrr::map_dfr(~ fish_base_prices2(.x, fisher = TRUE, nthchild_num = 10)) |>\n  mutate(profession = \"fisher\")\n\n# Prices with Angler profession\nfish_prices[[12]] <- fishleft |>\n  purrr::map_dfr(~ fish_base_prices2(.x, angler = TRUE, nthchild_num = 10)) |>\n  mutate(profession = \"angler\")\n```\n:::\n\n\nFinally we will take our fish prices and then create one big tibble.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# first tbl in fish prices assigned to our final tibble \ntidy_fish_prices <- fish_prices[[1]] \n\n# for loop for iterating each tbl in our fish prices list to our final tibble\nfor (i in 2:12){\n  tidy_fish_prices <- bind_rows(tidy_fish_prices, fish_prices[[i]])\n}\n\n# viewing and alphabetizing our tidy fish tbl \n# also joining our subcategories and assigning category\n(tidy_fish_prices <- tidy_fish_prices |>\n  left_join(subcategory, join_by(item == Fish)) |>\n  mutate(category = \"fish\") |>\n  rename(sub_category = Location) |>\n  arrange(item))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in left_join(tidy_fish_prices, subcategory, join_by(item == Fish)): Detected an unexpected many-to-many relationship between `x` and `y`.\nℹ Row 1 of `x` matches multiple rows in `y`.\nℹ Row 8 of `y` matches multiple rows in `x`.\nℹ If a many-to-many relationship is expected, set `relationship =\n  \"many-to-many\"` to silence this warning.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 318 × 8\n   item     regular_price silver_price gold_price iridium_price profession\n   <chr>            <dbl>        <dbl>      <dbl>         <dbl> <chr>     \n 1 Albacore            75           93        112           150 <NA>      \n 2 Albacore            93          116        140           187 fisher    \n 3 Albacore           112          139        168           225 angler    \n 4 Anchovy             30           37         45            60 <NA>      \n 5 Anchovy             37           46         56            75 fisher    \n 6 Anchovy             45           55         67            90 angler    \n 7 Angler             900         1125       1350          1800 <NA>      \n 8 Angler             900         1125       1350          1800 <NA>      \n 9 Angler            1125         1406       1687          2250 fisher    \n10 Angler            1125         1406       1687          2250 fisher    \n# ℹ 308 more rows\n# ℹ 2 more variables: sub_category <chr>, category <chr>\n```\n\n\n:::\n\n```{.r .cell-code}\n# writing our tbl as a csv so that we can join with the other items \n#write.csv(tidy_fish_prices, \"fish_prices.csv\")\nhead(tidy_fish_prices, n = 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 8\n   item     regular_price silver_price gold_price iridium_price profession\n   <chr>            <dbl>        <dbl>      <dbl>         <dbl> <chr>     \n 1 Albacore            75           93        112           150 <NA>      \n 2 Albacore            93          116        140           187 fisher    \n 3 Albacore           112          139        168           225 angler    \n 4 Anchovy             30           37         45            60 <NA>      \n 5 Anchovy             37           46         56            75 fisher    \n 6 Anchovy             45           55         67            90 angler    \n 7 Angler             900         1125       1350          1800 <NA>      \n 8 Angler             900         1125       1350          1800 <NA>      \n 9 Angler            1125         1406       1687          2250 fisher    \n10 Angler            1125         1406       1687          2250 fisher    \n# ℹ 2 more variables: sub_category <chr>, category <chr>\n```\n\n\n:::\n:::\n\n\n### Animal Products\n\nAnimal products was one of the easier items to scrape since we were able to scrape the data from a table.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#first be polite and check that we can scrape it \nrobotstxt::paths_allowed(\"https://stardewvalleywiki.com/Animal_Products_Profitability\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\n stardewvalleywiki.com                      \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\nsession <- bow(\"https://stardewvalleywiki.com/Animal_Products_Profitability\", force = TRUE)\n\n#take the second table, because that is the one we are interested in\nresult_animals <- scrape(session) |>\n  html_nodes(css = \"table\") |> \n  html_table(header = TRUE, fill = TRUE)\n\nsd_animal_prices <- result_animals[[2]]\n```\n:::\n\n\nFrom here all we have to do is clean up our tibble.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#clean up the sd_animal_prices tibble\ntidy_sd_animal_price <- sd_animal_prices |>\n  clean_names()|>\n  select(item, \n         profession, \n         quality, \n         sell_price)|> #select only the columns we want\n  group_by(item, profession)|>\n  pivot_wider(names_from = quality, \n              values_from = sell_price, \n              names_glue = \"{quality}_price\",\n              values_fn = mean)|>\n  clean_names()|>\n  mutate(category = \"animal product\",\n         profession = ifelse(profession == \"—\", NA, profession))\n\n#write the final version to a csv\n#write.csv(tidy_sd_animal_price, \"animal_product_prices.csv\")\nhead(tidy_sd_animal_price, n = 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 7\n# Groups:   item, profession [10]\n   item  profession regular_price silver_price gold_price iridium_price category\n   <chr> <chr>              <dbl>        <dbl>      <dbl>         <dbl> <chr>   \n 1 Egg   <NA>                  50           62         75           100 animal …\n 2 Egg   Rancher               60           75         90           120 animal …\n 3 Egg   Artisan               50           62         75           100 animal …\n 4 Larg… <NA>                  95          118        142           190 animal …\n 5 Larg… Rancher              114          142        171           228 animal …\n 6 Larg… Artisan               95          118        142           190 animal …\n 7 Void… <NA>                  65           81         97           130 animal …\n 8 Void… Rancher               78           97        117           156 animal …\n 9 Void… Artisan               65           81         97           130 animal …\n10 Duck… <NA>                  95          118        142           190 animal …\n```\n\n\n:::\n:::\n\n\n### Minerals\n\nMinerals was one of the easier items to scrape since we were able to scrape the data from a table. However assigning the category and subcategories is what made the process a little more tedious.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\n#first be polite and check that we can scrape it \nrobotstxt::paths_allowed(\"https://stardewvalleywiki.com/Minerals\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\n stardewvalleywiki.com                      \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\nsession <- bow(\"https://stardewvalleywiki.com/Minerals\", force = TRUE)\n\nresult_minerals <- scrape(session) |>\n  html_nodes(css = \"table\") |> \n  html_table(header = TRUE, fill = TRUE)\n#interested in tables 1-4\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#This function takes a scraped minerals table and preps it for joining with other datasets\ntidy_minerals <- function(data, sub_cat){\n  data|>\n  clean_names()|>\n  mutate(item = name,\n         category = \"mineral\",\n         sub_category = sub_cat)|>\n  rename(regular_sell_price = sell_price)|>\n  pivot_longer(\n    cols = c(gemologist_sell_price,\n             regular_sell_price),\n    names_to = \"profession\",\n    values_to = \"sell_price\"\n  )|>\n  select(item, \n         profession, \n         sell_price,\n         category,\n         sub_category)|>\n  mutate(sell_price = as.numeric(str_extract(sell_price, '(?<=data-sort-value=\")\\\\d+')),\n         profession = ifelse(profession == \"gemologist_sell_price\",\n                             \"gemologist\", NA))\n  \n \n}\n\n#use function for the 1-3 tables using a for loop\nminerals_tbl <- vector(\"list\", length = 4)\nmineral_sub_cat <- c(\"foraged mineral\",\n                     \"gem\",\n                     \"geode mineral\",\n                     \"geode\")\nfor (i in 1:3){\n  minerals_tbl[[i]] <- tidy_minerals(result_minerals[[i]], mineral_sub_cat[i])\n  \n}\n\n#clean up the variable names so that it is ready for the row bind.\n# make sure the category is all mineral, and the sub_category is correct\nminerals_tbl[[4]]<- result_minerals[[4]]|>\n  clean_names()|>\n  mutate(item = name,\n         category = \"mineral\",\n         sub_category = \"geode\",\n         sell_price = as.numeric(str_extract(sell_price, '(?<=data-sort-value=\")\\\\d+')),\n         profession = NA)|>\n  select(item, sell_price, category, sub_category, profession)\n\ntidy_sd_minerals_price <- bind_rows(minerals_tbl)\n```\n:::\n\n\nWrite it to a csv in case the website changes or updates.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#write.csv(tidy_sd_minerals_price, \"minerals_prices.csv\")\nhead(tidy_sd_minerals_price, n = 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 5\n   item          profession sell_price category sub_category   \n   <chr>         <chr>           <dbl> <chr>    <chr>          \n 1 Quartz        gemologist         32 mineral  foraged mineral\n 2 Quartz        <NA>               25 mineral  foraged mineral\n 3 Earth Crystal gemologist         65 mineral  foraged mineral\n 4 Earth Crystal <NA>               50 mineral  foraged mineral\n 5 Frozen Tear   gemologist         97 mineral  foraged mineral\n 6 Frozen Tear   <NA>               75 mineral  foraged mineral\n 7 Fire Quartz   gemologist        130 mineral  foraged mineral\n 8 Fire Quartz   <NA>              100 mineral  foraged mineral\n 9 Emerald       gemologist        325 mineral  gem            \n10 Emerald       <NA>              250 mineral  gem            \n```\n\n\n:::\n:::\n\n\n#### Combined Dataset\n\nWe then merge together all of the data sets for each of the 4 categories: crops, fish, animal products, and minerals.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# binding rows for all of different categories \nstardew_items <- bind_rows(crop_prices, \n                           tidy_sd_animal_price, \n                           tidy_sd_minerals_price,\n                           tidy_fish_prices)\n\n#write.csv(stardew_items, \"stardew_items.csv\")\n\nhead(stardew_items, n = 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 9\n   item  regular_price silver_price gold_price iridium_price profession category\n   <chr>         <dbl>        <dbl>      <dbl>         <dbl> <chr>      <chr>   \n 1 Amar…           150          187        225           300 <NA>       crop    \n 2 Amar…           165          205        247           330 tiller     crop    \n 3 Anci…           550          687        825          1100 <NA>       crop    \n 4 Anci…           605          755        907          1210 tiller     crop    \n 5 Apple           100          125        150           200 <NA>       crop    \n 6 Apple           110          137        165           220 tiller     crop    \n 7 Apri…            50           62         75           100 <NA>       crop    \n 8 Apri…            55           68         82           110 tiller     crop    \n 9 Arti…           160          200        240           320 <NA>       crop    \n10 Arti…           176          220        264           352 tiller     crop    \n# ℹ 2 more variables: sub_category <chr>, sell_price <dbl>\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}