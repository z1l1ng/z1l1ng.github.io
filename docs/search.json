[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "About Me:",
    "section": "",
    "text": "Hi! I’m Ziling, however most know me as Z! I’m currently a senior math major with a statistics and data science concentration at St. Olaf College. I’m also #2 on the NCAA women’s basketball team here. Outside of my commitments as a college student I love socializing with friends, going to sporting events and trying new foods! This is a place where I’ll be sharing some of my work!"
  },
  {
    "objectID": "index.html#education",
    "href": "index.html#education",
    "title": "About Me:",
    "section": "Education",
    "text": "Education\nSt. Olaf College | Northfield, MN  B.A in Mathematics | Sept 2022 - May 2025\nPortland Community College | Portland, OR  Transfer | Sept 2021 - June 2022"
  },
  {
    "objectID": "index.html#experience",
    "href": "index.html#experience",
    "title": "About Me:",
    "section": "Experience",
    "text": "Experience\nIncoming Analytics LDP Associate  Ameriprise Financial | Minneapolis, MN | June 2024\nData Science 1 Tutor  St. Olaf College | Northfield, MN | Sept 2023 - Present\nService Desk Intern  Cambria | Eden Praire, MN | May 2023 - August 2023"
  },
  {
    "objectID": "index.html#ziling-zhen",
    "href": "index.html#ziling-zhen",
    "title": "About Me:",
    "section": "",
    "text": "Hi! I’m Ziling, however most know me as Z! I’m currently a senior math major with a statistics and data science concentration at St. Olaf College. I’m also #2 on the NCAA women’s basketball team here. Outside of my commitments as a college student I love socializing with friends, going to sporting events and trying new foods! This is a place where I’ll be sharing some of my work!"
  },
  {
    "objectID": "MiniProject1.html",
    "href": "MiniProject1.html",
    "title": "Creating Informative Maps",
    "section": "",
    "text": "This was a mini-project done for SDS 264 - Data Science 2, Fall of 2023. To view the qmd, click here."
  },
  {
    "objectID": "MiniProject1.html#load-in-libraries-datasets",
    "href": "MiniProject1.html#load-in-libraries-datasets",
    "title": "Creating Informative Maps",
    "section": "Load in Libraries & Datasets",
    "text": "Load in Libraries & Datasets\n\n# Load in libraries\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(maps)\n\n\nAttaching package: 'maps'\n\nThe following object is masked from 'package:purrr':\n\n    map\n\nlibrary(viridis)\n\nLoading required package: viridisLite\n\nAttaching package: 'viridis'\n\nThe following object is masked from 'package:maps':\n\n    unemp\n\nlibrary(statebins)\nlibrary(leaflet)\nlibrary(sf)\n\nLinking to GEOS 3.11.0, GDAL 3.5.3, PROJ 9.1.0; sf_use_s2() is TRUE\n\nlibrary(htmltools)\nlibrary(glue)\nlibrary(readr)\n\n\n# Load in datasets\ndecennial_census10 &lt;- read_csv(\"~/SDS264/Class Files/00_Data/DECENNIALCD1162010.P1-Data.csv\")\n\nNew names:\nRows: 53 Columns: 4\n── Column specification\n──────────────────────────────────────────────────────── Delimiter: \",\" chr\n(3): GEO_ID, NAME, P001001 lgl (1): ...4\nℹ Use `spec()` to retrieve the full column specification for this data. ℹ\nSpecify the column types or set `show_col_types = FALSE` to quiet this message.\n• `` -&gt; `...4`\n\ndecennial_census20 &lt;- read_csv(\"~/SDS264/Class Files/00_Data/DECENNIALCD1182020.P1-Data.csv\")\n\nNew names:\nRows: 53 Columns: 4\n── Column specification\n──────────────────────────────────────────────────────── Delimiter: \",\" chr\n(3): GEO_ID, NAME, P1_001N lgl (1): ...4\nℹ Use `spec()` to retrieve the full column specification for this data. ℹ\nSpecify the column types or set `show_col_types = FALSE` to quiet this message.\n• `` -&gt; `...4`\n\nmarijuana_laws2024 &lt;- read_csv(\"~/SDS264/Class Files/00_Data/marijuana-laws-by-state-2024.csv\")\n\nRows: 51 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): state, LegalStatus, Medicinal, Decriminalized\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n# Load in states sf\nstates &lt;- read_sf(\"https://rstudio.github.io/leaflet/json/us-states.geojson\")\nstates\n\nSimple feature collection with 52 features and 3 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -188.9049 ymin: 17.92956 xmax: -65.6268 ymax: 71.35163\nGeodetic CRS:  WGS 84\n# A tibble: 52 × 4\n   id    name                  density                                  geometry\n   &lt;chr&gt; &lt;chr&gt;                   &lt;dbl&gt;                        &lt;MULTIPOLYGON [°]&gt;\n 1 01    Alabama                 94.6  (((-87.3593 35.00118, -85.60667 34.98475…\n 2 02    Alaska                   1.26 (((-131.602 55.11798, -131.5692 55.28229…\n 3 04    Arizona                 57.0  (((-109.0425 37.00026, -109.048 31.33163…\n 4 05    Arkansas                56.4  (((-94.47384 36.50186, -90.15254 36.4963…\n 5 06    California             242.   (((-123.2333 42.00619, -122.3789 42.0116…\n 6 08    Colorado                49.3  (((-107.9197 41.00391, -105.729 40.99843…\n 7 09    Connecticut            739.   (((-73.05353 42.03905, -71.79931 42.0226…\n 8 10    Delaware               464.   (((-75.41409 39.80446, -75.5072 39.68396…\n 9 11    District of Columbia 10065    (((-77.03526 38.99387, -76.90929 38.8952…\n10 12    Florida                353.   (((-85.49714 30.99754, -85.00421 31.0030…\n# ℹ 42 more rows"
  },
  {
    "objectID": "MiniProject1.html#joining-datasets-calculating-percent-change",
    "href": "MiniProject1.html#joining-datasets-calculating-percent-change",
    "title": "Creating Informative Maps",
    "section": "Joining Datasets & Calculating Percent Change",
    "text": "Joining Datasets & Calculating Percent Change\n\n# Data wrangling\ncensus_sf &lt;- decennial_census10 |&gt;\n  left_join(decennial_census20, join_by(NAME)) |&gt;\n  rename(name = NAME,\n         population20 = P1_001N,\n         population10 = P001001) |&gt;\n  select(name, \n         population10, \n         population20) |&gt;\n  filter(!(name %in% c(\"Alaska\", \n                       \"Hawaii\", \n                       \"District of Columbia\", \n                       \"Puerto Rico\", \n                       \"Label for GEO_ID\"))\n  ) |&gt;\n  mutate(population10 = as.double(population10),\n         population20 = as.double(population20),\n         perc_change = (population20 - population10)/abs(population10) * 100,\n         perc_change = round(perc_change, 3)) |&gt;\n  left_join(states, join_by(name)) |&gt;\n  st_as_sf()\n\ncensus_sf\n\nSimple feature collection with 48 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -124.7066 ymin: 25.12078 xmax: -66.9796 ymax: 49.38362\nGeodetic CRS:  WGS 84\n# A tibble: 48 × 7\n   name        population10 population20 perc_change id    density\n   &lt;chr&gt;              &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;\n 1 Alabama          4779736      5024279       5.12  01       94.6\n 2 Arizona          6392017      7151502      11.9   04       57.0\n 3 Arkansas         2915918      3011524       3.28  05       56.4\n 4 California      37253956     39538223       6.13  06      242. \n 5 Colorado         5029196      5773714      14.8   08       49.3\n 6 Connecticut      3574097      3605944       0.891 09      739. \n 7 Delaware          897934       989948      10.2   10      464. \n 8 Florida         18801310     21538187      14.6   12      353. \n 9 Georgia          9687653     10711908      10.6   13      170. \n10 Idaho            1567582      1839106      17.3   16       19.2\n# ℹ 38 more rows\n# ℹ 1 more variable: geometry &lt;MULTIPOLYGON [°]&gt;"
  },
  {
    "objectID": "MiniProject1.html#same-map-but-interactive",
    "href": "MiniProject1.html#same-map-but-interactive",
    "title": "Creating Informative Maps",
    "section": "Same Map, but Interactive!",
    "text": "Same Map, but Interactive!\n\n# First interactive plot\nbins &lt;- c(-20, -15, -10, -5, 0, 5, 10, 15, 20)\nmy_scale &lt;- colorRamp(c(\"red\", \"white\", \"#2aab32\"), interpolate=\"linear\")\npal &lt;- colorBin(palette = my_scale, domain = census_sf$perc_change, bins = bins)\n\ncensus_sf &lt;- census_sf |&gt;\n  mutate(labels = str_c(name, \": \", perc_change, \"% Change in Population\"))\n  labels &lt;- lapply(census_sf$labels, HTML)\n\nleaflet(census_sf) |&gt;\n  setView(-96, 37.8, 4) |&gt;\n  addTiles() |&gt;\n  addPolygons(\n    weight = 2,\n    opacity = 1,\n    color = \"black\",\n    fillColor = ~ pal(census_sf$perc_change),\n    dashArray = \"3\",\n    fillOpacity = 0.7,\n    highlightOptions = highlightOptions(\n      weight = 5,\n      color = \"#666\",\n      dashArray = \"\",\n      fillOpacity = 0.7,\n      bringToFront = TRUE),\n    label = labels,\n    labelOptions = labelOptions(\n      style = list(\"font-weight\" = \"normal\", padding = \"3px 8px\"),\n      textsize = \"15px\",\n      direction = \"auto\")) |&gt;\n  addLegend(pal = pal, \n            values = ~census_sf$perc_change, \n            opacity = 0.7, \n            title = \"% Change\", \n            position = \"bottomright\") |&gt;\n  addControl(\"&lt;h4&gt;Percentage Change in Population of The US, 2010 to 2020&lt;/h4&gt;\", \n             position = \"topright\", \n             className = \"map-title\")"
  },
  {
    "objectID": "MiniProject1.html#creaiting-legality-categories-based-on-legal-status-medicinal-and-decrimilized.",
    "href": "MiniProject1.html#creaiting-legality-categories-based-on-legal-status-medicinal-and-decrimilized.",
    "title": "Creating Informative Maps",
    "section": "Creaiting “legality” Categories based on Legal Status, Medicinal, and Decrimilized.",
    "text": "Creaiting “legality” Categories based on Legal Status, Medicinal, and Decrimilized.\n\n# Data wrangling pt. 2\nmarijuana_laws2024_sf &lt;- marijuana_laws2024 |&gt;\n  mutate(legality = ifelse(LegalStatus == \"Mixed\" & \n                             Medicinal == \"Yes\" & \n                             Decriminalized == \"No\", \"Medicinal, not decriminalized\", LegalStatus),\n         legality = ifelse(LegalStatus == \"Mixed\" & \n                             Medicinal == \"Yes\" & \n                             Decriminalized == \"Yes\", \"Medicinal, decriminalized\", legality),\n         legality = ifelse(LegalStatus == \"Mixed\" & \n                             Medicinal == \"CBD Oil Only\" & \n                             Decriminalized == \"No\", \"CBD Oil Only, not decriminalized\", legality),\n         legality = ifelse(LegalStatus == \"Mixed\" & \n                             Medicinal == \"CBD Oil Only\" & \n                             Decriminalized == \"Yes\", \"CBD Oil Only, decriminalized\", legality),\n         legality = ifelse(LegalStatus == \"Legalized\" & \n                             Decriminalized == \"Yes\", \"Legalized, decriminalized\", legality),\n         legality = ifelse(LegalStatus == \"Legalized\" & \n                             Decriminalized == \"No\", \"Legalized, not decriminalized\", legality),\n         legality = ifelse(LegalStatus == \"Fully Illegal\" & \n                             Decriminalized == \"No\", \"Illegal, not decriminalized\", legality),\n         legality = ifelse(LegalStatus == \"Fully Illegal\" & \n                             Decriminalized == \"Yes\", \"Illegal, decriminalized\", legality),\n         legality = ifelse(LegalStatus == \"Illegal, but decriminalized\" & \n                             Decriminalized == \"Yes\", \"Illegal, decriminalized\", legality),\n         LegalStatus = ifelse(LegalStatus == \"Fully Illegal\", \"Illegal\", LegalStatus),\n         LegalStatus = ifelse(LegalStatus == \"Illegal, but decriminalized\", \"Illegal\", LegalStatus)\n         ) |&gt;\n  rename(name = state) |&gt;\n  filter(!(name %in% c(\"Alaska\", \"Hawaii\", \"District of Columbia\", \"Puerto Rico\"))) |&gt;\n  left_join(states, join_by(name)) |&gt;\n  st_as_sf()\n\n\n# Second static plot\nggplot(marijuana_laws2024_sf) +\n  geom_sf(aes(fill = LegalStatus)) +\n  scale_fill_manual(values = c(\"#e41a1c\", \"#4daf4a\", \"#377eb8\")) +\n  labs(title = \"Legalization of Marijuana in the US 2022\",\n       fill = \"Legaility\",\n       caption = \"Source: https://worldpopulationreview.com/state-rankings/marijuana-laws-by-state\") +\n  theme_bw()\n\n\n\n\n\n\n\n\nThis is a map of the United States showing the legalization of marijuana in 2022. On the y-axis is longitude and on the x-axis is latitude. The categories of legality are “Illegal”, “Legalized”, and “Mixed”, with the associated colors on the map being red, green, and blue, respectively. There are 6 states where marijuana is illegal, these states are Idaho, Kansas, Nebraska, North and South Carolina, and Wyoming. On the map, 2 of these states are on the East Coast and the rest are in the middle of the US. For the rest of the US, marijuana is either legalized or has mixed laws. A lot of the states in the west have legalized marijuana, this includes Oregon, Washington, California, along with Nevada and Arizona. There are also some states on the East Coast have also legalized marijuana. Where as states in the south and in the Midwest have mixed laws. Note that this is data from 2022, and some states with mixed laws, are now fully legalized.\n\n# Second interactive plot\nmarijuana_laws2024_sf &lt;- marijuana_laws2024_sf |&gt;\n  mutate(labels = str_c(name, \": \", legality))\n\nlabels &lt;- lapply(marijuana_laws2024_sf$labels, HTML)\n\nlevels(marijuana_laws2024_sf$LegalStatus)\n\nNULL\n\nfactpal &lt;- colorFactor(c(\"#e41a1c\", \"#4daf4a\", \"#377eb8\"), \n                       levels(marijuana_laws2024_sf$LegalStatus))\n\nleaflet(marijuana_laws2024_sf) |&gt;\n  setView(-96, 37.8, 4) |&gt;\n  addTiles() |&gt;\n  addPolygons(\n    weight = 2,\n    opacity = 1,\n    color = \"black\",\n    fillColor = ~ factpal(marijuana_laws2024_sf$LegalStatus),\n    dashArray = \"3\",\n    fillOpacity = 0.7,\n    highlightOptions = highlightOptions(\n      weight = 5,\n      color = \"#666\",\n      dashArray = \"\",\n      fillOpacity = 0.7,\n      bringToFront = TRUE),\n    label = labels,\n    labelOptions = labelOptions(\n      style = list(\"font-weight\" = \"normal\", \n                   padding = \"3px 8px\"),\n      textsize = \"15px\",\n      direction = \"auto\")) |&gt;\n  addLegend(pal = factpal, \n            values = ~marijuana_laws2024_sf$LegalStatus, \n            opacity = 0.7, title = NULL, \n            position = \"bottomright\") |&gt;\n  addControl(\"&lt;h4&gt;Legalization of Marijuana in the US 2022&lt;/h4&gt;\", \n             position = \"topright\", \n             className = \"map-title\")"
  },
  {
    "objectID": "MiniProject1.html#creating-new-legality-column",
    "href": "MiniProject1.html#creating-new-legality-column",
    "title": "Creating Informative Maps",
    "section": "Creating New “legality” Column",
    "text": "Creating New “legality” Column\n\n# Data wrangling pt. 2\nmarijuana_laws2024_sf &lt;- marijuana_laws2024 |&gt;\n  mutate(legality = ifelse(LegalStatus == \"Mixed\" & \n                             Medicinal == \"Yes\" & \n                             Decriminalized == \"No\", \"Medicinal, not decriminalized\", LegalStatus),\n         legality = ifelse(LegalStatus == \"Mixed\" & \n                             Medicinal == \"Yes\" & \n                             Decriminalized == \"Yes\", \"Medicinal, decriminalized\", legality),\n         legality = ifelse(LegalStatus == \"Mixed\" & \n                             Medicinal == \"CBD Oil Only\" & \n                             Decriminalized == \"No\", \"CBD Oil Only, not decriminalized\", legality),\n         legality = ifelse(LegalStatus == \"Mixed\" & \n                             Medicinal == \"CBD Oil Only\" & \n                             Decriminalized == \"Yes\", \"CBD Oil Only, decriminalized\", legality),\n         legality = ifelse(LegalStatus == \"Legalized\" & \n                             Decriminalized == \"Yes\", \"Legalized, decriminalized\", legality),\n         legality = ifelse(LegalStatus == \"Legalized\" & \n                             Decriminalized == \"No\", \"Legalized, not decriminalized\", legality),\n         legality = ifelse(LegalStatus == \"Fully Illegal\" & \n                             Decriminalized == \"No\", \"Illegal, not decriminalized\", legality),\n         legality = ifelse(LegalStatus == \"Fully Illegal\" & \n                             Decriminalized == \"Yes\", \"Illegal, decriminalized\", legality),\n         legality = ifelse(LegalStatus == \"Illegal, but decriminalized\" & \n                             Decriminalized == \"Yes\", \"Illegal, decriminalized\", legality),\n         LegalStatus = ifelse(LegalStatus == \"Fully Illegal\", \"Illegal\", LegalStatus),\n         LegalStatus = ifelse(LegalStatus == \"Illegal, but decriminalized\", \"Illegal\", LegalStatus)\n         ) |&gt;\n  rename(name = state) |&gt;\n  filter(!(name %in% c(\"Alaska\", \"Hawaii\", \"District of Columbia\", \"Puerto Rico\"))) |&gt;\n  left_join(states, join_by(name)) |&gt;\n  st_as_sf()\n\nmarijuana_laws2024_sf\n\nSimple feature collection with 48 features and 7 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -124.7066 ymin: 25.12078 xmax: -66.9796 ymax: 49.38362\nGeodetic CRS:  WGS 84\n# A tibble: 48 × 8\n   name        LegalStatus Medicinal    Decriminalized legality    id    density\n   &lt;chr&gt;       &lt;chr&gt;       &lt;chr&gt;        &lt;chr&gt;          &lt;chr&gt;       &lt;chr&gt;   &lt;dbl&gt;\n 1 Alabama     Mixed       Yes          No             Medicinal,… 01       94.6\n 2 Arizona     Legalized   Yes          Yes            Legalized,… 04       57.0\n 3 Arkansas    Mixed       Yes          No             Medicinal,… 05       56.4\n 4 California  Legalized   Yes          Yes            Legalized,… 06      242. \n 5 Colorado    Legalized   Yes          Yes            Legalized,… 08       49.3\n 6 Connecticut Legalized   Yes          Yes            Legalized,… 09      739. \n 7 Delaware    Legalized   Yes          Yes            Legalized,… 10      464. \n 8 Florida     Mixed       Yes          No             Medicinal,… 12      353. \n 9 Georgia     Mixed       CBD Oil Only No             CBD Oil On… 13      170. \n10 Idaho       Illegal     No           No             Illegal, n… 16       19.2\n# ℹ 38 more rows\n# ℹ 1 more variable: geometry &lt;MULTIPOLYGON [°]&gt;"
  },
  {
    "objectID": "MiniProject1.html#percentage-change-in-population-of-the-us-from-2010-to-2020",
    "href": "MiniProject1.html#percentage-change-in-population-of-the-us-from-2010-to-2020",
    "title": "Creating Informative Maps",
    "section": "Percentage Change in Population of the US from 2010 to 2020",
    "text": "Percentage Change in Population of the US from 2010 to 2020\n\n# First static plot\n  ggplot(census_sf) +\n  geom_sf(aes(fill = perc_change)) +\n  scale_fill_gradient2(\n    high = \"#2aab32\", \n    mid = \"white\",\n    low = \"red\",\n    limits = c(-15, 20)) +\n  labs(title = \"Percentage Change in Population of the US from 2010 to 2020\",\n       fill = \"% Change\",\n       caption = \" Source: data.census.gov\") +\n  theme_bw()\n\n\n\n\n\n\n\n\nThis is a map of the United States showing the percent change in population of the United States from 2010 to 2020 by state. On the y-axis is longitude and on the x-axis is latitude. Percent change varies from a decrease of -3% of the population to an increase of 18%, with red representing a decrease in population (a negative percentage) and green representing an increase in population (a positive percentage). We can see from this map that Utah, Idaho, and Texas had the largest percent increase in population. The states in the Midwest, such as Illinois, Iowa, Minnesota, South Dakota, Wisconsin, etc. (the 90W and 45N area), the states also had an increase in population however it is a smaller percentage. West Virginia is the only visible state that is red and this represents a decrease in population by 3.19%. For the population increase in states, this could be caused by people moving states, and more people in the United States overall."
  },
  {
    "objectID": "MiniProject1.html#legalization-of-marijuana-in-the-us-2022",
    "href": "MiniProject1.html#legalization-of-marijuana-in-the-us-2022",
    "title": "Creating Informative Maps",
    "section": "Legalization of Marijuana in the US 2022",
    "text": "Legalization of Marijuana in the US 2022\n\n# Second static plot\nggplot(marijuana_laws2024_sf) +\n  geom_sf(aes(fill = LegalStatus)) +\n  scale_fill_manual(values = c(\"#e41a1c\", \"#4daf4a\", \"#377eb8\")) +\n  labs(title = \"Legalization of Marijuana in the US 2022\",\n       fill = \"Legaility\",\n       caption = \"Source: https://worldpopulationreview.com/state-rankings/marijuana-laws-by-state\") +\n  theme_bw()\n\n\n\n\n\n\n\n\nThis is a map of the United States showing the legalization of marijuana in 2022. On the y-axis is longitude and on the x-axis is latitude. The categories of legality are “Illegal”, “Legalized”, and “Mixed”, with the associated colors on the map being red, green, and blue, respectively. There are 6 states where marijuana is illegal, these states are Idaho, Kansas, Nebraska, North and South Carolina, and Wyoming. On the map, 2 of these states are on the East Coast and the rest are in the middle of the US. For the rest of the US, marijuana is either legalized or has mixed laws. A lot of the states in the west have legalized marijuana, this includes Oregon, Washington, California, along with Nevada and Arizona. There are also some states on the East Coast have also legalized marijuana. Where as states in the south and in the Midwest have mixed laws. Note that this is data from 2022, and some states with mixed laws, are now fully legalized."
  },
  {
    "objectID": "MiniProject1.html#same-map-but-interactive-1",
    "href": "MiniProject1.html#same-map-but-interactive-1",
    "title": "Creating Informative Maps",
    "section": "Same Map, but Interactive!",
    "text": "Same Map, but Interactive!\n\n# Second interactive plot\nmarijuana_laws2024_sf &lt;- marijuana_laws2024_sf |&gt;\n  mutate(labels = str_c(name, \": \", legality))\n\nlabels &lt;- lapply(marijuana_laws2024_sf$labels, HTML)\n\nfactpal &lt;- colorFactor(c(\"#e41a1c\", \"#4daf4a\", \"#377eb8\"), \n                       levels(marijuana_laws2024_sf$LegalStatus))\n\nleaflet(marijuana_laws2024_sf) |&gt;\n  setView(-96, 37.8, 4) |&gt;\n  addTiles() |&gt;\n  addPolygons(\n    weight = 2,\n    opacity = 1,\n    color = \"black\",\n    fillColor = ~ factpal(marijuana_laws2024_sf$LegalStatus),\n    dashArray = \"3\",\n    fillOpacity = 0.7,\n    highlightOptions = highlightOptions(\n      weight = 5,\n      color = \"#666\",\n      dashArray = \"\",\n      fillOpacity = 0.7,\n      bringToFront = TRUE),\n    label = labels,\n    labelOptions = labelOptions(\n      style = list(\"font-weight\" = \"normal\", \n                   padding = \"3px 8px\"),\n      textsize = \"15px\",\n      direction = \"auto\")) |&gt;\n  addLegend(pal = factpal, \n            values = ~marijuana_laws2024_sf$LegalStatus, \n            opacity = 0.7, title = NULL, \n            position = \"bottomright\") |&gt;\n  addControl(\"&lt;h4&gt;Legalization of Marijuana in the US 2022&lt;/h4&gt;\", \n             position = \"topright\", \n             className = \"map-title\")"
  },
  {
    "objectID": "creatingmaps.html",
    "href": "creatingmaps.html",
    "title": "Creating Informative Maps",
    "section": "",
    "text": "This was a mini-project done for SDS 264 - Data Science 2 where we are creating informative maps, 2 choropleth and 2 interactive. To view the qmd, click here."
  },
  {
    "objectID": "creatingmaps.html#load-in-libraries-datasets",
    "href": "creatingmaps.html#load-in-libraries-datasets",
    "title": "Creating Informative Maps",
    "section": "Load in Libraries & Datasets",
    "text": "Load in Libraries & Datasets\n\n# Load in libraries\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(maps)\n\n\nAttaching package: 'maps'\n\nThe following object is masked from 'package:purrr':\n\n    map\n\nlibrary(viridis)\n\nLoading required package: viridisLite\n\nAttaching package: 'viridis'\n\nThe following object is masked from 'package:maps':\n\n    unemp\n\nlibrary(statebins)\nlibrary(leaflet)\nlibrary(sf)\n\nLinking to GEOS 3.11.0, GDAL 3.5.3, PROJ 9.1.0; sf_use_s2() is TRUE\n\nlibrary(htmltools)\nlibrary(glue)\nlibrary(readr)\n\n\n# Load in datasets\ndecennial_census10 &lt;- read_csv(\"~/SDS264/Class Files/00_Data/DECENNIALCD1162010.P1-Data.csv\")\n\nNew names:\nRows: 53 Columns: 4\n── Column specification\n──────────────────────────────────────────────────────── Delimiter: \",\" chr\n(3): GEO_ID, NAME, P001001 lgl (1): ...4\nℹ Use `spec()` to retrieve the full column specification for this data. ℹ\nSpecify the column types or set `show_col_types = FALSE` to quiet this message.\n• `` -&gt; `...4`\n\ndecennial_census20 &lt;- read_csv(\"~/SDS264/Class Files/00_Data/DECENNIALCD1182020.P1-Data.csv\")\n\nNew names:\nRows: 53 Columns: 4\n── Column specification\n──────────────────────────────────────────────────────── Delimiter: \",\" chr\n(3): GEO_ID, NAME, P1_001N lgl (1): ...4\nℹ Use `spec()` to retrieve the full column specification for this data. ℹ\nSpecify the column types or set `show_col_types = FALSE` to quiet this message.\n• `` -&gt; `...4`\n\nmarijuana_laws2024 &lt;- read_csv(\"~/SDS264/Class Files/00_Data/marijuana-laws-by-state-2024.csv\")\n\nRows: 51 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): state, LegalStatus, Medicinal, Decriminalized\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n# Load in states sf\nstates &lt;- read_sf(\"https://rstudio.github.io/leaflet/json/us-states.geojson\")\nstates\n\nSimple feature collection with 52 features and 3 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -188.9049 ymin: 17.92956 xmax: -65.6268 ymax: 71.35163\nGeodetic CRS:  WGS 84\n# A tibble: 52 × 4\n   id    name                  density                                  geometry\n   &lt;chr&gt; &lt;chr&gt;                   &lt;dbl&gt;                        &lt;MULTIPOLYGON [°]&gt;\n 1 01    Alabama                 94.6  (((-87.3593 35.00118, -85.60667 34.98475…\n 2 02    Alaska                   1.26 (((-131.602 55.11798, -131.5692 55.28229…\n 3 04    Arizona                 57.0  (((-109.0425 37.00026, -109.048 31.33163…\n 4 05    Arkansas                56.4  (((-94.47384 36.50186, -90.15254 36.4963…\n 5 06    California             242.   (((-123.2333 42.00619, -122.3789 42.0116…\n 6 08    Colorado                49.3  (((-107.9197 41.00391, -105.729 40.99843…\n 7 09    Connecticut            739.   (((-73.05353 42.03905, -71.79931 42.0226…\n 8 10    Delaware               464.   (((-75.41409 39.80446, -75.5072 39.68396…\n 9 11    District of Columbia 10065    (((-77.03526 38.99387, -76.90929 38.8952…\n10 12    Florida                353.   (((-85.49714 30.99754, -85.00421 31.0030…\n# ℹ 42 more rows"
  },
  {
    "objectID": "creatingmaps.html#joining-datasets-calculating-percent-change",
    "href": "creatingmaps.html#joining-datasets-calculating-percent-change",
    "title": "Creating Informative Maps",
    "section": "Joining Datasets & Calculating Percent Change",
    "text": "Joining Datasets & Calculating Percent Change\n\n# Data wrangling\ncensus_sf &lt;- decennial_census10 |&gt;\n  left_join(decennial_census20, join_by(NAME)) |&gt;\n  rename(name = NAME,\n         population20 = P1_001N,\n         population10 = P001001) |&gt;\n  select(name, \n         population10, \n         population20) |&gt;\n  filter(!(name %in% c(\"Alaska\", \n                       \"Hawaii\", \n                       \"District of Columbia\", \n                       \"Puerto Rico\", \n                       \"Label for GEO_ID\"))\n  ) |&gt;\n  mutate(population10 = as.double(population10),\n         population20 = as.double(population20),\n         perc_change = (population20 - population10)/abs(population10) * 100,\n         perc_change = round(perc_change, 3)) |&gt;\n  left_join(states, join_by(name)) |&gt;\n  st_as_sf()\n\ncensus_sf\n\nSimple feature collection with 48 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -124.7066 ymin: 25.12078 xmax: -66.9796 ymax: 49.38362\nGeodetic CRS:  WGS 84\n# A tibble: 48 × 7\n   name        population10 population20 perc_change id    density\n   &lt;chr&gt;              &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;\n 1 Alabama          4779736      5024279       5.12  01       94.6\n 2 Arizona          6392017      7151502      11.9   04       57.0\n 3 Arkansas         2915918      3011524       3.28  05       56.4\n 4 California      37253956     39538223       6.13  06      242. \n 5 Colorado         5029196      5773714      14.8   08       49.3\n 6 Connecticut      3574097      3605944       0.891 09      739. \n 7 Delaware          897934       989948      10.2   10      464. \n 8 Florida         18801310     21538187      14.6   12      353. \n 9 Georgia          9687653     10711908      10.6   13      170. \n10 Idaho            1567582      1839106      17.3   16       19.2\n# ℹ 38 more rows\n# ℹ 1 more variable: geometry &lt;MULTIPOLYGON [°]&gt;"
  },
  {
    "objectID": "creatingmaps.html#percentage-change-in-population-of-the-us-from-2010-to-2020",
    "href": "creatingmaps.html#percentage-change-in-population-of-the-us-from-2010-to-2020",
    "title": "Creating Informative Maps",
    "section": "Percentage Change in Population of the US from 2010 to 2020",
    "text": "Percentage Change in Population of the US from 2010 to 2020\n\n# First static plot\n  ggplot(census_sf) +\n  geom_sf(aes(fill = perc_change)) +\n  scale_fill_gradient2(\n    high = \"#2aab32\", \n    mid = \"white\",\n    low = \"red\",\n    limits = c(-15, 20)) +\n  labs(title = \"Percentage Change in Population of the US from 2010 to 2020\",\n       fill = \"% Change\",\n       caption = \" Source: data.census.gov\") +\n  theme_bw()\n\n\n\n\n\n\n\n\nThis is a map of the United States showing the percent change in population of the United States from 2010 to 2020 by state. On the y-axis is longitude and on the x-axis is latitude. Percent change varies from a decrease of -3% of the population to an increase of 18%, with red representing a decrease in population (a negative percentage) and green representing an increase in population (a positive percentage). We can see from this map that Utah, Idaho, and Texas had the largest percent increase in population. The states in the Midwest, such as Illinois, Iowa, Minnesota, South Dakota, Wisconsin, etc. (the 90W and 45N area), the states also had an increase in population however it is a smaller percentage. West Virginia is the only visible state that is red and this represents a decrease in population by 3.19%. For the population increase in states, this could be caused by people moving states, and more people in the United States overall."
  },
  {
    "objectID": "creatingmaps.html#same-map-but-interactive",
    "href": "creatingmaps.html#same-map-but-interactive",
    "title": "Creating Informative Maps",
    "section": "Same Map, but Interactive!",
    "text": "Same Map, but Interactive!\n\n# First interactive plot\nbins &lt;- c(-20, -15, -10, -5, 0, 5, 10, 15, 20)\nmy_scale &lt;- colorRamp(c(\"red\", \"white\", \"#2aab32\"), interpolate=\"linear\")\npal &lt;- colorBin(palette = my_scale, domain = census_sf$perc_change, bins = bins)\n\ncensus_sf &lt;- census_sf |&gt;\n  mutate(labels = str_c(name, \": \", perc_change, \"% Change in Population\"))\n  labels &lt;- lapply(census_sf$labels, HTML)\n\nleaflet(census_sf) |&gt;\n  setView(-96, 37.8, 4) |&gt;\n  addTiles() |&gt;\n  addPolygons(\n    weight = 2,\n    opacity = 1,\n    color = \"black\",\n    fillColor = ~ pal(census_sf$perc_change),\n    dashArray = \"3\",\n    fillOpacity = 0.7,\n    highlightOptions = highlightOptions(\n      weight = 5,\n      color = \"#666\",\n      dashArray = \"\",\n      fillOpacity = 0.7,\n      bringToFront = TRUE),\n    label = labels,\n    labelOptions = labelOptions(\n      style = list(\"font-weight\" = \"normal\", padding = \"3px 8px\"),\n      textsize = \"15px\",\n      direction = \"auto\")) |&gt;\n  addLegend(pal = pal, \n            values = ~census_sf$perc_change, \n            opacity = 0.7, \n            title = \"% Change\", \n            position = \"bottomright\") |&gt;\n  addControl(\"&lt;h4&gt;Percentage Change in Population of The US, 2010 to 2020&lt;/h4&gt;\", \n             position = \"topright\", \n             className = \"map-title\")"
  },
  {
    "objectID": "creatingmaps.html#creating-new-legality-column",
    "href": "creatingmaps.html#creating-new-legality-column",
    "title": "Creating Informative Maps",
    "section": "Creating New “legality” Column",
    "text": "Creating New “legality” Column\n\n# Data wrangling pt. 2\nmarijuana_laws2024_sf &lt;- marijuana_laws2024 |&gt;\n  mutate(legality = ifelse(LegalStatus == \"Mixed\" & \n                             Medicinal == \"Yes\" & \n                             Decriminalized == \"No\", \"Medicinal, not decriminalized\", LegalStatus),\n         legality = ifelse(LegalStatus == \"Mixed\" & \n                             Medicinal == \"Yes\" & \n                             Decriminalized == \"Yes\", \"Medicinal, decriminalized\", legality),\n         legality = ifelse(LegalStatus == \"Mixed\" & \n                             Medicinal == \"CBD Oil Only\" & \n                             Decriminalized == \"No\", \"CBD Oil Only, not decriminalized\", legality),\n         legality = ifelse(LegalStatus == \"Mixed\" & \n                             Medicinal == \"CBD Oil Only\" & \n                             Decriminalized == \"Yes\", \"CBD Oil Only, decriminalized\", legality),\n         legality = ifelse(LegalStatus == \"Legalized\" & \n                             Decriminalized == \"Yes\", \"Legalized, decriminalized\", legality),\n         legality = ifelse(LegalStatus == \"Legalized\" & \n                             Decriminalized == \"No\", \"Legalized, not decriminalized\", legality),\n         legality = ifelse(LegalStatus == \"Fully Illegal\" & \n                             Decriminalized == \"No\", \"Illegal, not decriminalized\", legality),\n         legality = ifelse(LegalStatus == \"Fully Illegal\" & \n                             Decriminalized == \"Yes\", \"Illegal, decriminalized\", legality),\n         legality = ifelse(LegalStatus == \"Illegal, but decriminalized\" & \n                             Decriminalized == \"Yes\", \"Illegal, decriminalized\", legality),\n         LegalStatus = ifelse(LegalStatus == \"Fully Illegal\", \"Illegal\", LegalStatus),\n         LegalStatus = ifelse(LegalStatus == \"Illegal, but decriminalized\", \"Illegal\", LegalStatus)\n         ) |&gt;\n  rename(name = state) |&gt;\n  filter(!(name %in% c(\"Alaska\", \"Hawaii\", \"District of Columbia\", \"Puerto Rico\"))) |&gt;\n  left_join(states, join_by(name)) |&gt;\n  st_as_sf()\n\nmarijuana_laws2024_sf\n\nSimple feature collection with 48 features and 7 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -124.7066 ymin: 25.12078 xmax: -66.9796 ymax: 49.38362\nGeodetic CRS:  WGS 84\n# A tibble: 48 × 8\n   name        LegalStatus Medicinal    Decriminalized legality    id    density\n   &lt;chr&gt;       &lt;chr&gt;       &lt;chr&gt;        &lt;chr&gt;          &lt;chr&gt;       &lt;chr&gt;   &lt;dbl&gt;\n 1 Alabama     Mixed       Yes          No             Medicinal,… 01       94.6\n 2 Arizona     Legalized   Yes          Yes            Legalized,… 04       57.0\n 3 Arkansas    Mixed       Yes          No             Medicinal,… 05       56.4\n 4 California  Legalized   Yes          Yes            Legalized,… 06      242. \n 5 Colorado    Legalized   Yes          Yes            Legalized,… 08       49.3\n 6 Connecticut Legalized   Yes          Yes            Legalized,… 09      739. \n 7 Delaware    Legalized   Yes          Yes            Legalized,… 10      464. \n 8 Florida     Mixed       Yes          No             Medicinal,… 12      353. \n 9 Georgia     Mixed       CBD Oil Only No             CBD Oil On… 13      170. \n10 Idaho       Illegal     No           No             Illegal, n… 16       19.2\n# ℹ 38 more rows\n# ℹ 1 more variable: geometry &lt;MULTIPOLYGON [°]&gt;"
  },
  {
    "objectID": "creatingmaps.html#legalization-of-marijuana-in-the-us-2022",
    "href": "creatingmaps.html#legalization-of-marijuana-in-the-us-2022",
    "title": "Creating Informative Maps",
    "section": "Legalization of Marijuana in the US 2022",
    "text": "Legalization of Marijuana in the US 2022\n\n# Second static plot\nggplot(marijuana_laws2024_sf) +\n  geom_sf(aes(fill = LegalStatus)) +\n  scale_fill_manual(values = c(\"#e41a1c\", \"#4daf4a\", \"#377eb8\")) +\n  labs(title = \"Legalization of Marijuana in the US 2022\",\n       fill = \"Legaility\",\n       caption = \"Source: https://worldpopulationreview.com/state-rankings/marijuana-laws-by-state\") +\n  theme_bw()\n\n\n\n\n\n\n\n\nThis is a map of the United States showing the legalization of marijuana in 2022. On the y-axis is longitude and on the x-axis is latitude. The categories of legality are “Illegal”, “Legalized”, and “Mixed”, with the associated colors on the map being red, green, and blue, respectively. There are 6 states where marijuana is illegal, these states are Idaho, Kansas, Nebraska, North and South Carolina, and Wyoming. On the map, 2 of these states are on the East Coast and the rest are in the middle of the US. For the rest of the US, marijuana is either legalized or has mixed laws. A lot of the states in the west have legalized marijuana, this includes Oregon, Washington, California, along with Nevada and Arizona. There are also some states on the East Coast have also legalized marijuana. Where as states in the south and in the Midwest have mixed laws. Note that this is data from 2022, and some states with mixed laws, are now fully legalized."
  },
  {
    "objectID": "creatingmaps.html#same-map-but-interactive-1",
    "href": "creatingmaps.html#same-map-but-interactive-1",
    "title": "Creating Informative Maps",
    "section": "Same Map, but Interactive!",
    "text": "Same Map, but Interactive!\n\n# Second interactive plot\nmarijuana_laws2024_sf &lt;- marijuana_laws2024_sf |&gt;\n  mutate(labels = str_c(name, \": \", legality))\n\nlabels &lt;- lapply(marijuana_laws2024_sf$labels, HTML)\n\nfactpal &lt;- colorFactor(c(\"#e41a1c\", \"#4daf4a\", \"#377eb8\"), \n                       levels(marijuana_laws2024_sf$LegalStatus))\n\nleaflet(marijuana_laws2024_sf) |&gt;\n  setView(-96, 37.8, 4) |&gt;\n  addTiles() |&gt;\n  addPolygons(\n    weight = 2,\n    opacity = 1,\n    color = \"black\",\n    fillColor = ~ factpal(marijuana_laws2024_sf$LegalStatus),\n    dashArray = \"3\",\n    fillOpacity = 0.7,\n    highlightOptions = highlightOptions(\n      weight = 5,\n      color = \"#666\",\n      dashArray = \"\",\n      fillOpacity = 0.7,\n      bringToFront = TRUE),\n    label = labels,\n    labelOptions = labelOptions(\n      style = list(\"font-weight\" = \"normal\", \n                   padding = \"3px 8px\"),\n      textsize = \"15px\",\n      direction = \"auto\")) |&gt;\n  addLegend(pal = factpal, \n            values = ~marijuana_laws2024_sf$LegalStatus, \n            opacity = 0.7, title = NULL, \n            position = \"bottomright\") |&gt;\n  addControl(\"&lt;h4&gt;Legalization of Marijuana in the US 2022&lt;/h4&gt;\", \n             position = \"topright\", \n             className = \"map-title\")"
  },
  {
    "objectID": "dataacquisition.html",
    "href": "dataacquisition.html",
    "title": "Data Acquistion Project",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(stringr)\nlibrary(rvest)\n\n\nAttaching package: 'rvest'\n\nThe following object is masked from 'package:readr':\n\n    guess_encoding\n\nlibrary(polite)\nlibrary(sf)\n\nLinking to GEOS 3.11.0, GDAL 3.5.3, PROJ 9.1.0; sf_use_s2() is TRUE\n\nlibrary(maps)\n\n\nAttaching package: 'maps'\n\nThe following object is masked from 'package:purrr':\n\n    map\n\nlibrary(viridis)\n\nLoading required package: viridisLite\n\nAttaching package: 'viridis'\n\nThe following object is masked from 'package:maps':\n\n    unemp\n\nlibrary(leaflet)\nlibrary(htmltools)\nlibrary(janitor)\n\n\nAttaching package: 'janitor'\n\nThe following objects are masked from 'package:stats':\n\n    chisq.test, fisher.test\n\nlibrary(httr2)\nlibrary(httr)\nlibrary(lubridate)\nlibrary(tidycensus)\nlibrary(purrr)"
  },
  {
    "objectID": "dataacquisition.html#load-in-libraries",
    "href": "dataacquisition.html#load-in-libraries",
    "title": "Data Acquistion Project",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(stringr)\nlibrary(rvest)\n\n\nAttaching package: 'rvest'\n\nThe following object is masked from 'package:readr':\n\n    guess_encoding\n\nlibrary(polite)\nlibrary(sf)\n\nLinking to GEOS 3.11.0, GDAL 3.5.3, PROJ 9.1.0; sf_use_s2() is TRUE\n\nlibrary(maps)\n\n\nAttaching package: 'maps'\n\nThe following object is masked from 'package:purrr':\n\n    map\n\nlibrary(viridis)\n\nLoading required package: viridisLite\n\nAttaching package: 'viridis'\n\nThe following object is masked from 'package:maps':\n\n    unemp\n\nlibrary(leaflet)\nlibrary(htmltools)\nlibrary(janitor)\n\n\nAttaching package: 'janitor'\n\nThe following objects are masked from 'package:stats':\n\n    chisq.test, fisher.test\n\nlibrary(httr2)\nlibrary(httr)\nlibrary(lubridate)\nlibrary(tidycensus)\nlibrary(purrr)"
  },
  {
    "objectID": "dataacquisition.html#introduction",
    "href": "dataacquisition.html#introduction",
    "title": "Data Acquistion Project",
    "section": "Introduction",
    "text": "Introduction\nFor our project, we decided to scrape data from the wiki pages of one of our favorite video games, Stardew Valley. Stardew Valley is a popular indie farming game that allows players to take on the role of a character who inherits a run-down farm from their grandfather. In the game, players can grow crops, raise animals, fish, mine, and engage in social activities with the towns people.\nFor our project, we were interested in compiling a list of items from the game that can be farmed or collected. The only way to make money from the game is by selling these items, and the price of the item depends on the quality of the item and the profession(s) of the player. Thus, our dataset includes information on the name, category, subcategory, and the different price points of the item depending on item quality (regular, silver, gold, and iridium) and player’s profession."
  },
  {
    "objectID": "dataacquisition.html#approach",
    "href": "dataacquisition.html#approach",
    "title": "Data Acquistion Project",
    "section": "Approach",
    "text": "Approach\nAll of our data has been accumulated from the Stardew Valley Wiki page. Since each item in the game has a different page and not all of the pages followed a similar structure, we used a combination of harvesting the data in both table form and anywhere on the webpage using rvest with html_text. In the end, we were able to create a dataset from the more important item categories: crops, fish, animal products, and minerals.\n\nCrops\nCrops was the most difficult item to scrape from the wiki, since not all of the pages are structured the same. However, we tried our best to automate where we could.\nWe start be getting a list of all the different crops in the game.\n\n#check that we are allowed to scrape the wiki\nrobotstxt::paths_allowed(\"https://stardewvalleywiki.com/Stardew_Valley_Wiki\")\n\n\n stardewvalleywiki.com                      \n\n\n[1] TRUE\n\nsession &lt;- bow(\"https://stardewvalleywiki.com/Stardew_Valley_Wiki\", force = TRUE)\n\n\ncrops &lt;- bow(\"https://stardewvalleywiki.com/Crops\", force = TRUE)\n\nresult &lt;- scrape(crops) |&gt;\n  html_nodes(css = \"table\") |&gt;\n  html_table(header = TRUE, fill = TRUE)\n\nseasonal_crops &lt;- result[[134]][2] #table of the season crops so we can use that list\n\nseasonal_crops &lt;- seasonal_crops |&gt;\n  mutate(Crops = strsplit(Crops, \" • \", fixed = TRUE)) |&gt;\n  unnest(Crops) |&gt;\n  mutate(Crops = str_replace_all(Crops, \" \", \"_\")) |&gt;\n  distinct(Crops)\n\nCreate our helper functions for crops:\n\n# function for getting the price at a given page and css selector\nget_price &lt;- function(page, css_selector) {\n  page |&gt;\n  html_nodes(css_selector) |&gt;\n  html_text()\n}\n\n# function for creating a tibble of base prices, no profession, for a given crop page\ncrop_base_prices &lt;- function(crop, tiller = FALSE) {\n  url &lt;- str_c(\"https://stardewvalleywiki.com/\", crop)\n  page &lt;- read_html(url)\n  \n  qualities &lt;- c(\"regular\", \"silver\", \"gold\", \"iridium\")\n  prices &lt;- list()\n  \n  for (i in seq_along(qualities)) {\n    if (tiller) {\n      selector &lt;- str_c(\"tr:nth-child(10) td+ td tr:nth-child(\", i, \") td+ td\")\n    } else {\n      selector &lt;- str_c(\"tr:nth-child(10) tr td:nth-child(1) tr:nth-child(\", i, \") td+ td\")\n    }\n    price &lt;- get_price(page, selector)\n    prices[[qualities[i]]] &lt;- parse_number(price)\n  }\n  \n  tibble(\n    item = crop,\n    regular_price = prices$regular,\n    silver_price = prices$silver,\n    gold_price = prices$gold,\n    iridium_price = prices$iridium\n  )\n}\n\nCreate the tibbles for seasonal crops using the helper functions. Note that items 46 (Tea_Leaves), 44(Sweet Gem Berry), 43(Qi_Fruit), 41(Cactus_Fruit), 36(Grape), 4(Coffee_Bean) have issues when using the functions, so we will scrape the data manually without the functions.\n\n# list of all our seasonal crops\nseasonal_crops_list &lt;- pull(seasonal_crops) # list of our crops tibble\n\n# List of crops, excluding those with known issues\nvalid_crops_list &lt;- seasonal_crops_list[-c(46, 44, 43, 41, 36, 4)]\n\n# Base prices without profession\nbase_crop_prices &lt;- valid_crops_list |&gt;\n  purrr::map_dfr(~ crop_base_prices(.x)) |&gt;\n  mutate(profession = as.character(NA))\n\n# Prices with Tiller profession\ntiller_crop_prices &lt;- valid_crops_list |&gt;\n  purrr::map_dfr(~ crop_base_prices(.x, tiller = TRUE)) |&gt;\n  mutate(profession = \"tiller\")\n\n# Combine base and tiller crop prices\nseasonal_crop_prices &lt;- bind_rows(base_crop_prices, tiller_crop_prices)\nseasonal_crop_prices\n\n# A tibble: 80 × 6\n   item        regular_price silver_price gold_price iridium_price profession\n   &lt;chr&gt;               &lt;dbl&gt;        &lt;dbl&gt;      &lt;dbl&gt;         &lt;dbl&gt; &lt;chr&gt;     \n 1 Blue_Jazz              50           62         75           100 &lt;NA&gt;      \n 2 Carrot                 35           43         52            70 &lt;NA&gt;      \n 3 Cauliflower           175          218        262           350 &lt;NA&gt;      \n 4 Garlic                 60           75         90           120 &lt;NA&gt;      \n 5 Green_Bean             40           50         60            80 &lt;NA&gt;      \n 6 Kale                  110          137        165           220 &lt;NA&gt;      \n 7 Parsnip                35           43         52            70 &lt;NA&gt;      \n 8 Potato                 80          100        120           160 &lt;NA&gt;      \n 9 Rhubarb               220          275        330           440 &lt;NA&gt;      \n10 Strawberry            120          150        180           240 &lt;NA&gt;      \n# ℹ 70 more rows\n\n\nDo the same for non seasonal crops:\n\n# Non-seasonal crops list, excluding problematic items\nother_crops &lt;- c(\"Apple\", \"Blackberry\", \"Pomegranate\", \"Wild_Plum\", \"Apricot\", \n                 \"Cherry\", \"Spice_Berry\", \"Peach\", \"Orange\", \"Crystal_Fruit\", \n                 \"Banana\", \"Mango\", \"Fiddlehead_Fern\")[-c(10, 7, 4, 2)]\n\n# Base prices without profession\nbase_other_crops &lt;- other_crops |&gt;\n  purrr::map_dfr(~ crop_base_prices(.x)) |&gt;\n  mutate(profession = as.character(NA))\n\n# Prices with Tiller profession\ntiller_other_crops &lt;- other_crops |&gt;\n  purrr::map_dfr(~ crop_base_prices(.x, tiller = TRUE)) |&gt;\n  mutate(profession = \"tiller\")\n\n# Combine base and tiller prices into one table and arrange by item\nnonseasonal_crop_tbl &lt;- bind_rows(base_other_crops, tiller_other_crops) |&gt;\n  arrange(item)\n\nFinally, create a function for the weird crops that have missing quality or selector path was different\n\n#function for the crops that do not have different qualities\ncrop_weird_prices &lt;- function(item, selector){\n  url &lt;- str_c(\"https://stardewvalleywiki.com/\", item)\n  page &lt;- read_html(url)\n  regular_price &lt;- get_price(page, selector)\n  \n  tibble(item = item,\n      regular_price = parse_number(regular_price))\n}\n\n#function for the crops that have different qualities. the Berry is for the fruits that have a weird selector that seems to follow a similar pattern.\ncrop_weird_prices_w_quality &lt;- function(crop, tiller = FALSE, berry = FALSE ){\n  url &lt;- str_c(\"https://stardewvalleywiki.com/\", crop)\n  page &lt;- read_html(url)\n  \n  qualities &lt;- c(\"regular\", \"silver\", \"gold\", \"iridium\")\n  prices &lt;- list()\n  \n  for (i in seq_along(qualities)) {\n    if (tiller) {\n      selector &lt;- str_c(\"tr:nth-child(11) td+ td tr:nth-child(\", i, \") td+ td\")\n    } else if (berry){\n      selector &lt;- str_c(\"tr:nth-child(9) tr:nth-child(\", i, \") td+ td\")\n    }else {\n      selector &lt;- str_c(\"tr:nth-child(11) tr td:nth-child(1) tr:nth-child(\", i, \") td+ td\")\n    }\n    price &lt;- get_price(page, selector)\n    prices[[qualities[i]]] &lt;- parse_number(price)\n  }\n  \n  tibble(\n    item = crop,\n    regular_price = prices$regular,\n    silver_price = prices$silver,\n    gold_price = prices$gold,\n    iridium_price = prices$iridium\n  )\n}\n\nNow we make all of the tibbles for the weird crops.\n\n# Tea Leaves\nbase_tea_leaves &lt;- crop_weird_prices(\"Tea_Leaves\",\n                                     \"tr:nth-child(10) tr td:nth-child(1) td+ td\")\ntiller_tea_leaves &lt;- crop_weird_prices(\"Tea_Leaves\",\n                                     \"tr:nth-child(10) td+ td td+ td\")\n\ntea_leaves &lt;-bind_rows(base_tea_leaves, tiller_tea_leaves)\n\n# Qi_Fruit\nbase_qi_fruit &lt;-crop_weird_prices(\"Qi_Fruit\",\n                                  \"tr:nth-child(9) tr td:nth-child(1) td+ td\")\ntiller_qi_fruit &lt;-crop_weird_prices(\"Qi_Fruit\",\n                                  \"tr:nth-child(9) td+ td td+ td\")\n\nqi_fruit &lt;-bind_rows(base_qi_fruit, tiller_qi_fruit)\n\n# Cactus fruit\ncactus_fruit &lt;- crop_weird_prices_w_quality(\"Cactus_Fruit\")\ncactus_fruit_tiller &lt;- crop_weird_prices_w_quality(\"Cactus_Fruit\", tiller = TRUE)\n\ncactus_fruit &lt;-bind_rows(cactus_fruit, cactus_fruit_tiller)\n\n# Grape\ngrape &lt;- crop_weird_prices_w_quality(\"Grape\")\ngrape_tiller &lt;- crop_weird_prices_w_quality(\"Grape\", tiller = TRUE)\n\ngrape &lt;-bind_rows(grape, grape_tiller)\n\n# Coffee_bean\ncoffee_bean &lt;- crop_weird_prices_w_quality(\"Coffee_Bean\")\n\n# Wild_plum\nwild_plum &lt;- crop_weird_prices_w_quality(\"Wild_Plum\", berry = TRUE)\n\n# Spice_berry\nspice_berry &lt;- crop_weird_prices_w_quality(\"Spice_Berry\", berry = TRUE)\n\n# Crystal_Fruit\ncrystal_fruit &lt;- crop_weird_prices_w_quality(\"Crystal_Fruit\", berry = TRUE)\n\n# Finally, blackberry is just weird and likes to be different, so we did not use a function for it. \n#Blackberry\n\n# Base\nurl &lt;- str_c(\"https://stardewvalleywiki.com/\", \"Blackberry\")\npage &lt;- read_html(url)\n\nqualities &lt;- c(\"regular\", \"silver\", \"gold\", \"iridium\")\nprices &lt;- list()\n\n# Loop to retrieve and parse prices\nfor (i in seq_along(qualities)) {\n  price &lt;- get_price(page, str_c(\"tr:nth-child(9) tr td:nth-child(1) tr:nth-child(\", i, \") td+ td\"))\n  prices[[qualities[i]]] &lt;- parse_number(price)\n}\n\nblackberry &lt;- tibble(\n  item = \"Blackberry\",\n  regular_price = prices$regular,\n  silver_price = prices$silver,\n  gold_price = prices$gold,\n  iridium_price = prices$iridium\n)\n\nNow, we can combine all of the crop tibbles into one:\n\n# First chunks of crops \ndraft_crops &lt;- bind_rows(seasonal_crop_prices,\n                         nonseasonal_crop_tbl,\n                         tea_leaves, \n                         qi_fruit, \n                         cactus_fruit, \n                         grape, \n                         coffee_bean, \n                         wild_plum, \n                         blackberry, \n                         spice_berry, \n                         crystal_fruit) |&gt;\n  arrange(item)\n\nLastly, we can add in the category variable and the subcategory variable. to makes things easier, we decided the subcategory would be the crop’s season. Then, we write it to a csv in case the website changes or updates.\n\nseasons &lt;- result[[134]] %&gt;%\n  select(Season = 1, Crops = 2) |&gt;\n  mutate(Crops = strsplit(Crops, \" • \", fixed = TRUE)) |&gt;\n  unnest(Crops) |&gt;\n  mutate(Crops = str_replace_all(Crops, \" \", \"_\"))\n\n\ncrop_prices &lt;- draft_crops |&gt;\n  left_join(seasons, join_by(item == Crops))|&gt;\n   mutate(category = \"crop\",\n          sub_category = str_c(Season, \" Crop\"))|&gt;\n  select(-Season)\n\nWarning in left_join(draft_crops, seasons, join_by(item == Crops)): Detected an unexpected many-to-many relationship between `x` and `y`.\nℹ Row 32 of `x` matches multiple rows in `y`.\nℹ Row 29 of `y` matches multiple rows in `x`.\nℹ If a many-to-many relationship is expected, set `relationship =\n  \"many-to-many\"` to silence this warning.\n\n#write.csv(crop_prices, \"crop_prices.csv\")\n\nhead(crop_prices, n = 10)\n\n# A tibble: 10 × 8\n   item  regular_price silver_price gold_price iridium_price profession category\n   &lt;chr&gt;         &lt;dbl&gt;        &lt;dbl&gt;      &lt;dbl&gt;         &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;   \n 1 Amar…           150          187        225           300 &lt;NA&gt;       crop    \n 2 Amar…           165          205        247           330 tiller     crop    \n 3 Anci…           550          687        825          1100 &lt;NA&gt;       crop    \n 4 Anci…           605          755        907          1210 tiller     crop    \n 5 Apple           100          125        150           200 &lt;NA&gt;       crop    \n 6 Apple           110          137        165           220 tiller     crop    \n 7 Apri…            50           62         75           100 &lt;NA&gt;       crop    \n 8 Apri…            55           68         82           110 tiller     crop    \n 9 Arti…           160          200        240           320 &lt;NA&gt;       crop    \n10 Arti…           176          220        264           352 tiller     crop    \n# ℹ 1 more variable: sub_category &lt;chr&gt;\n\n\n\n\nFish\nFish was the second most difficult item to scrape from the wiki, since again not all of the pages are structured the same. However, we were able identify 4 different pages in which we could write functions to automate.\nWe start be getting a list of all the different fish in the game.\n\n# Making sure that this irl is scrapable\nfish &lt;- bow(\"https://stardewvalleywiki.com/Fish\", force = TRUE) \n\n# Scraping table to get a list of all the fish \nresult &lt;- scrape(fish) |&gt;\n  html_nodes(css = \"table\") |&gt;\n  html_table(header = TRUE, fill = TRUE)\n\n# The correct table for the list of fish, and only keeping the names of the fish column\nfishes &lt;- result[[225]][2] \n\n# However, it is formatted very poorly so we need to tidy it up \nfishes &lt;- fishes |&gt;\n  mutate(Fish = strsplit(Fish, \" • \", fixed = TRUE)) |&gt;\n  unnest(Fish) |&gt;\n  # splitting the string since \" • \" was used to separate all fish\n  mutate(Fish = str_replace_all(Fish, \" \", \"_\")) |&gt; \n  distinct(Fish) |&gt;\n  # this is a fish that is in the data set twice but with different spacing \n  filter(Fish != \"_Super_Cucumber\") \n\n# This is a tibble with the subcategories of the fish and the fish name for joining later\nsubcategory &lt;- result[[225]] |&gt; \n  select(Location = 1, Fish = 2) |&gt; \n  mutate(Fish = strsplit(Fish, \" • \", fixed = TRUE)) |&gt; \n  unnest(Fish) |&gt;\n  mutate(Fish = str_replace_all(Fish, \" \", \"_\"))\n\nCreate our helper functions for fish:\n\n# function for getting the price at a given page and css selector\nget_price &lt;- function(page, css_selector) {\n  page |&gt;\n  html_nodes(css_selector) |&gt;\n  html_text()\n}\n\n# function for creating a tibble of prices for a given fish\n\n# this functions output a tibble of our fish \n# and the 4 different prices of the fish dependent on quality\n\n# fish_base_prices takes our fish name, \n# and takes a profession if we specify true or false, \n# as well as the \"nthchild_num\" value for where the price is being store on that website\n\nfish_base_prices &lt;- function(fish, fisher = FALSE, angler = FALSE, nthchild_num) {\n  url &lt;- str_c(\"https://stardewvalleywiki.com/\", fish)\n  page &lt;- read_html(url)\n  \n  qualities &lt;- c(\"regular\", \"silver\", \"gold\", \"iridium\")\n  prices &lt;- list()\n  \n  for (i in seq_along(qualities)) {\n    if (fisher) {\n      selector &lt;- str_c(\"tr:nth-child(\", nthchild_num,\") tr td:nth-child(2) tr:nth-child(\", i, \") td+ td\")\n    } else if (angler) {\n      selector &lt;- str_c(\"tr:nth-child(\", nthchild_num,\") tr td:nth-child(3) tr:nth-child(\", i, \") td+ td\")\n    } \n    else {\n      selector &lt;- str_c(\"tr:nth-child(\", nthchild_num,\") tr td:nth-child(1) tr:nth-child(\", i, \") td+ td\")\n    }\n    price &lt;- get_price(page, selector)\n    prices[[qualities[i]]] &lt;- parse_number(price)\n  }\n  \n  tibble(\n    item = fish,\n    regular_price = prices$regular,\n    silver_price = prices$silver,\n    gold_price = prices$gold,\n    iridium_price = prices$iridium\n  )\n}\n\nAs well as the function for the fish with a different webpage format.\n\n# this functions output a tibble of our fish, \n# and the 2 different prices of the fish dependent on quality\n\n# fish_base_prices takes our fish name, \n# and takes a profession if we specify true or false, \n# as well as the \"nthchild_num\" value for where the price is being store on that website\n\nfish_base_prices2 &lt;- function(fish, fisher = FALSE, angler = FALSE, nthchild_num) {\n  url &lt;- str_c(\"https://stardewvalleywiki.com/\", fish)\n  page &lt;- read_html(url)\n  \n  qualities &lt;- c(\"regular\", \"silver\", \"gold\", \"iridium\")\n  prices &lt;- list()\n  \n  for (i in seq_along(qualities)) {\n    if (fisher) {\n      selector &lt;- str_c(\"tr:nth-child(\", nthchild_num,\") tr td:nth-child(2) tr:nth-child(\", i, \") td+ td\")\n    } else if (angler) {\n      selector &lt;- str_c(\"tr:nth-child(\", nthchild_num,\") tr td:nth-child(3) tr:nth-child(\", i, \") td+ td\")\n    } \n    else {\n      selector &lt;- str_c(\"tr:nth-child(\", nthchild_num,\") tr td:nth-child(1) tr:nth-child(\", i, \") td+ td\")\n    }\n    price &lt;- get_price(page, selector)\n    prices[[qualities[i]]] &lt;- parse_number(price)\n  }\n  \n  tibble(\n    item = fish,\n    regular_price = prices$regular,\n    silver_price = prices$silver,\n  )\n}\n\nNow, we will load in our fishes lists so for the type of webpage format they have and then apply our function to the fishes to find their prices.\n\nfishes_list &lt;- pull(fishes) # List of our fishes tibble to view, then dividing up the fish by their website format\n\n# Loading in the fish we know that are tr:nth-child(14) in the html (these fishes were found in the Fish QMD when first exploring and getting to know our website)\nfishfor14 &lt;- readRDS(\"~/SDS264/Class Files/MiniProject2/fishfor14.RDS\")\nfishfor14\n\n [1] \"Mutant_Carp\"      \"Radioactive_Carp\" \"Albacore\"         \"Anchovy\"         \n [5] \"Eel\"              \"Flounder\"         \"Halibut\"          \"Herring\"         \n [9] \"Octopus\"          \"Pufferfish\"       \"Red_Mullet\"       \"Red_Snapper\"     \n[13] \"Sardine\"          \"Sea_Cucumber\"     \"Squid\"            \"Super_Cucumber\"  \n[17] \"Tilapia\"          \"Tuna\"             \"Bream\"            \"Catfish\"         \n[21] \"Chub\"             \"Dorado\"           \"Goby\"             \"Lingcod\"         \n[25] \"Perch\"            \"Pike\"             \"Rainbow_Trout\"    \"Salmon\"          \n[29] \"Shad\"             \"Smallmouth_Bass\"  \"Sunfish\"          \"Tiger_Trout\"     \n[33] \"Walleye\"          \"Bullhead\"         \"Carp\"             \"Largemouth_Bass\" \n[37] \"Midnight_Carp\"    \"Sturgeon\"         \"Woodskip\"         \"Ghostfish\"       \n[41] \"Ice_Pip\"          \"Stonefish\"        \"Sandfish\"         \"Slimejack\"       \n[45] \"Void_Salmon\"      \"Blobfish\"         \"Midnight_Squid\"   \"Spook_Fish\"      \n[49] \"Blue_Discus\"      \"Lionfish\"         \"Stingray\"        \n\n# Loading in the fish we know that are tr:nth-child(15) in the html, same as above\nfishfor15 &lt;- readRDS(\"~/SDS264/Class Files/MiniProject2/fishfor15.RDS\")\nfishfor15\n\n [1] \"Angler\"             \"Crimsonfish\"        \"Glacierfish\"       \n [4] \"Glacierfish_Jr.\"    \"Legend\"             \"Legend_II\"         \n [7] \"Ms._Angler\"         \"Son_of_Crimsonfish\" \"Lava_Eel\"          \n[10] \"Scorpion_Carp\"     \n\n# Loading in the fish we know that are tr:nth-child(10) in the html, same as above\nfishfor10 &lt;- readRDS(\"~/SDS264/Class Files/MiniProject2/fishfor10.RDS\")\nfishfor10 \n\n[1] \"Clam\"   \"Cockle\" \"Mussel\" \"Oyster\"\n\n# Loading in the fish we know that are tr:nth-child(10) in the html, same as above\nfishleft &lt;- readRDS(\"~/SDS264/Class Files/MiniProject2/fishleft.RDS\")\nfishleft\n\n[1] \"Crab\"       \"Crayfish\"   \"Lobster\"    \"Periwinkle\" \"Shrimp\"    \n[6] \"Snail\"     \n\n# Creating list of tbl's to store prices so that we can bind into one big tibble\nfish_prices &lt;- vector(\"list\", length = 12)\n\n# Base prices without profession for tr:nth-child(14)\nfish_prices[[1]] &lt;- fishfor14 |&gt;\n  purrr::map_dfr(~ fish_base_prices(.x, nthchild_num = 14)) |&gt;\n  mutate(profession = as.character(NA))\n\n# Prices with Fisher profession\nfish_prices[[2]] &lt;- fishfor14 |&gt;\n  purrr::map_dfr(~ fish_base_prices(.x, fisher = TRUE, nthchild_num = 14)) |&gt;\n  mutate(profession = \"fisher\")\n\n# Prices with Angler profession\nfish_prices[[3]] &lt;- fishfor14 |&gt;\n  purrr::map_dfr(~ fish_base_prices(.x, angler = TRUE, nthchild_num = 14)) |&gt;\n  mutate(profession = \"angler\")\n\n\n# Base prices without profession for tr:nth-child(15)\nfish_prices[[4]] &lt;- fishfor15 |&gt;\n  purrr::map_dfr(~ fish_base_prices(.x, nthchild_num = 15)) |&gt;\n  mutate(profession = as.character(NA))\n\n# Prices with Fisher profession\nfish_prices[[5]] &lt;- fishfor15 |&gt;\n  purrr::map_dfr(~ fish_base_prices(.x, fisher = TRUE, nthchild_num = 15)) |&gt;\n  mutate(profession = \"fisher\")\n\n# Prices with Angler profession\nfish_prices[[6]] &lt;- fishfor15 |&gt;\n  purrr::map_dfr(~ fish_base_prices(.x, angler = TRUE, nthchild_num = 15)) |&gt;\n  mutate(profession = \"angler\")\n\n\n# Base prices without profession for tr:nth-child(10)\nfish_prices[[7]] &lt;- fishfor10 |&gt;\n  purrr::map_dfr(~ fish_base_prices(.x, nthchild_num = 10)) |&gt;\n  mutate(profession = as.character(NA))\n\n# Prices with Fisher profession\nfish_prices[[8]] &lt;- fishfor10 |&gt;\n  purrr::map_dfr(~ fish_base_prices(.x, fisher = TRUE, nthchild_num = 10)) |&gt;\n  mutate(profession = \"fisher\")\n\n# Prices with Angler profession\nfish_prices[[9]] &lt;- fishfor10 |&gt;\n  purrr::map_dfr(~ fish_base_prices(.x, angler = TRUE, nthchild_num = 10)) |&gt;\n  mutate(profession = \"angler\")\n\n\n# Base prices without profession for tr:nth-child(10) but only two qualities\nfish_prices[[10]] &lt;- fishleft |&gt;\n  purrr::map_dfr(~ fish_base_prices2(.x, nthchild_num = 10)) |&gt;\n  mutate(profession = as.character(NA))\n\n# Prices with Fisher profession\nfish_prices[[11]] &lt;- fishleft |&gt;\n  purrr::map_dfr(~ fish_base_prices2(.x, fisher = TRUE, nthchild_num = 10)) |&gt;\n  mutate(profession = \"fisher\")\n\n# Prices with Angler profession\nfish_prices[[12]] &lt;- fishleft |&gt;\n  purrr::map_dfr(~ fish_base_prices2(.x, angler = TRUE, nthchild_num = 10)) |&gt;\n  mutate(profession = \"angler\")\n\nFinally we will take our fish prices and then create one big tibble.\n\n# first tbl in fish prices assigned to our final tibble \ntidy_fish_prices &lt;- fish_prices[[1]] \n\n# for loop for iterating each tbl in our fish prices list to our final tibble\nfor (i in 2:12){\n  tidy_fish_prices &lt;- bind_rows(tidy_fish_prices, fish_prices[[i]])\n}\n\n# viewing and alphabetizing our tidy fish tbl \n# also joining our subcategories and assigning category\n(tidy_fish_prices &lt;- tidy_fish_prices |&gt;\n  left_join(subcategory, join_by(item == Fish)) |&gt;\n  mutate(category = \"fish\") |&gt;\n  rename(sub_category = Location) |&gt;\n  arrange(item))\n\nWarning in left_join(tidy_fish_prices, subcategory, join_by(item == Fish)): Detected an unexpected many-to-many relationship between `x` and `y`.\nℹ Row 1 of `x` matches multiple rows in `y`.\nℹ Row 8 of `y` matches multiple rows in `x`.\nℹ If a many-to-many relationship is expected, set `relationship =\n  \"many-to-many\"` to silence this warning.\n\n\n# A tibble: 318 × 8\n   item     regular_price silver_price gold_price iridium_price profession\n   &lt;chr&gt;            &lt;dbl&gt;        &lt;dbl&gt;      &lt;dbl&gt;         &lt;dbl&gt; &lt;chr&gt;     \n 1 Albacore            75           93        112           150 &lt;NA&gt;      \n 2 Albacore            93          116        140           187 fisher    \n 3 Albacore           112          139        168           225 angler    \n 4 Anchovy             30           37         45            60 &lt;NA&gt;      \n 5 Anchovy             37           46         56            75 fisher    \n 6 Anchovy             45           55         67            90 angler    \n 7 Angler             900         1125       1350          1800 &lt;NA&gt;      \n 8 Angler             900         1125       1350          1800 &lt;NA&gt;      \n 9 Angler            1125         1406       1687          2250 fisher    \n10 Angler            1125         1406       1687          2250 fisher    \n# ℹ 308 more rows\n# ℹ 2 more variables: sub_category &lt;chr&gt;, category &lt;chr&gt;\n\n# writing our tbl as a csv so that we can join with the other items \n#write.csv(tidy_fish_prices, \"fish_prices.csv\")\nhead(tidy_fish_prices, n = 10)\n\n# A tibble: 10 × 8\n   item     regular_price silver_price gold_price iridium_price profession\n   &lt;chr&gt;            &lt;dbl&gt;        &lt;dbl&gt;      &lt;dbl&gt;         &lt;dbl&gt; &lt;chr&gt;     \n 1 Albacore            75           93        112           150 &lt;NA&gt;      \n 2 Albacore            93          116        140           187 fisher    \n 3 Albacore           112          139        168           225 angler    \n 4 Anchovy             30           37         45            60 &lt;NA&gt;      \n 5 Anchovy             37           46         56            75 fisher    \n 6 Anchovy             45           55         67            90 angler    \n 7 Angler             900         1125       1350          1800 &lt;NA&gt;      \n 8 Angler             900         1125       1350          1800 &lt;NA&gt;      \n 9 Angler            1125         1406       1687          2250 fisher    \n10 Angler            1125         1406       1687          2250 fisher    \n# ℹ 2 more variables: sub_category &lt;chr&gt;, category &lt;chr&gt;\n\n\n\n\nAnimal Products\nAnimal products was one of the easier items to scrape since we were able to scrape the data from a table.\n\n#first be polite and check that we can scrape it \nrobotstxt::paths_allowed(\"https://stardewvalleywiki.com/Animal_Products_Profitability\")\n\n\n stardewvalleywiki.com                      \n\n\n[1] TRUE\n\nsession &lt;- bow(\"https://stardewvalleywiki.com/Animal_Products_Profitability\", force = TRUE)\n\n#take the second table, because that is the one we are interested in\nresult_animals &lt;- scrape(session) |&gt;\n  html_nodes(css = \"table\") |&gt; \n  html_table(header = TRUE, fill = TRUE)\n\nsd_animal_prices &lt;- result_animals[[2]]\n\nFrom here all we have to do is clean up our tibble.\n\n#clean up the sd_animal_prices tibble\ntidy_sd_animal_price &lt;- sd_animal_prices |&gt;\n  clean_names()|&gt;\n  select(item, \n         profession, \n         quality, \n         sell_price)|&gt; #select only the columns we want\n  group_by(item, profession)|&gt;\n  pivot_wider(names_from = quality, \n              values_from = sell_price, \n              names_glue = \"{quality}_price\",\n              values_fn = mean)|&gt;\n  clean_names()|&gt;\n  mutate(category = \"animal product\",\n         profession = ifelse(profession == \"—\", NA, profession))\n\n#write the final version to a csv\n#write.csv(tidy_sd_animal_price, \"animal_product_prices.csv\")\nhead(tidy_sd_animal_price, n = 10)\n\n# A tibble: 10 × 7\n# Groups:   item, profession [10]\n   item  profession regular_price silver_price gold_price iridium_price category\n   &lt;chr&gt; &lt;chr&gt;              &lt;dbl&gt;        &lt;dbl&gt;      &lt;dbl&gt;         &lt;dbl&gt; &lt;chr&gt;   \n 1 Egg   &lt;NA&gt;                  50           62         75           100 animal …\n 2 Egg   Rancher               60           75         90           120 animal …\n 3 Egg   Artisan               50           62         75           100 animal …\n 4 Larg… &lt;NA&gt;                  95          118        142           190 animal …\n 5 Larg… Rancher              114          142        171           228 animal …\n 6 Larg… Artisan               95          118        142           190 animal …\n 7 Void… &lt;NA&gt;                  65           81         97           130 animal …\n 8 Void… Rancher               78           97        117           156 animal …\n 9 Void… Artisan               65           81         97           130 animal …\n10 Duck… &lt;NA&gt;                  95          118        142           190 animal …\n\n\n\n\nMinerals\nMinerals was one of the easier items to scrape since we were able to scrape the data from a table. However assigning the category and subcategories is what made the process a little more tedious.\n\n#first be polite and check that we can scrape it \nrobotstxt::paths_allowed(\"https://stardewvalleywiki.com/Minerals\")\n\n\n stardewvalleywiki.com                      \n\n\n[1] TRUE\n\nsession &lt;- bow(\"https://stardewvalleywiki.com/Minerals\", force = TRUE)\n\nresult_minerals &lt;- scrape(session) |&gt;\n  html_nodes(css = \"table\") |&gt; \n  html_table(header = TRUE, fill = TRUE)\n#interested in tables 1-4\n\n\n#This function takes a scraped minerals table and preps it for joining with other datasets\ntidy_minerals &lt;- function(data, sub_cat){\n  data|&gt;\n  clean_names()|&gt;\n  mutate(item = name,\n         category = \"mineral\",\n         sub_category = sub_cat)|&gt;\n  rename(regular_sell_price = sell_price)|&gt;\n  pivot_longer(\n    cols = c(gemologist_sell_price,\n             regular_sell_price),\n    names_to = \"profession\",\n    values_to = \"sell_price\"\n  )|&gt;\n  select(item, \n         profession, \n         sell_price,\n         category,\n         sub_category)|&gt;\n  mutate(sell_price = as.numeric(str_extract(sell_price, '(?&lt;=data-sort-value=\")\\\\d+')),\n         profession = ifelse(profession == \"gemologist_sell_price\",\n                             \"gemologist\", NA))\n  \n \n}\n\n#use function for the 1-3 tables using a for loop\nminerals_tbl &lt;- vector(\"list\", length = 4)\nmineral_sub_cat &lt;- c(\"foraged mineral\",\n                     \"gem\",\n                     \"geode mineral\",\n                     \"geode\")\nfor (i in 1:3){\n  minerals_tbl[[i]] &lt;- tidy_minerals(result_minerals[[i]], mineral_sub_cat[i])\n  \n}\n\n#clean up the variable names so that it is ready for the row bind.\n# make sure the category is all mineral, and the sub_category is correct\nminerals_tbl[[4]]&lt;- result_minerals[[4]]|&gt;\n  clean_names()|&gt;\n  mutate(item = name,\n         category = \"mineral\",\n         sub_category = \"geode\",\n         sell_price = as.numeric(str_extract(sell_price, '(?&lt;=data-sort-value=\")\\\\d+')),\n         profession = NA)|&gt;\n  select(item, sell_price, category, sub_category, profession)\n\ntidy_sd_minerals_price &lt;- bind_rows(minerals_tbl)\n\nWrite it to a csv in case the website changes or updates.\n\n#write.csv(tidy_sd_minerals_price, \"minerals_prices.csv\")\nhead(tidy_sd_minerals_price, n = 10)\n\n# A tibble: 10 × 5\n   item          profession sell_price category sub_category   \n   &lt;chr&gt;         &lt;chr&gt;           &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;          \n 1 Quartz        gemologist         32 mineral  foraged mineral\n 2 Quartz        &lt;NA&gt;               25 mineral  foraged mineral\n 3 Earth Crystal gemologist         65 mineral  foraged mineral\n 4 Earth Crystal &lt;NA&gt;               50 mineral  foraged mineral\n 5 Frozen Tear   gemologist         97 mineral  foraged mineral\n 6 Frozen Tear   &lt;NA&gt;               75 mineral  foraged mineral\n 7 Fire Quartz   gemologist        130 mineral  foraged mineral\n 8 Fire Quartz   &lt;NA&gt;              100 mineral  foraged mineral\n 9 Emerald       gemologist        325 mineral  gem            \n10 Emerald       &lt;NA&gt;              250 mineral  gem            \n\n\n\nCombined Dataset\nWe then merge together all of the data sets for each of the 4 categories: crops, fish, animal products, and minerals.\n\n# binding rows for all of different categories \nstardew_items &lt;- bind_rows(crop_prices, \n                           tidy_sd_animal_price, \n                           tidy_sd_minerals_price,\n                           tidy_fish_prices)\n\n#write.csv(stardew_items, \"stardew_items.csv\")\n\nhead(stardew_items, n = 10)\n\n# A tibble: 10 × 9\n   item  regular_price silver_price gold_price iridium_price profession category\n   &lt;chr&gt;         &lt;dbl&gt;        &lt;dbl&gt;      &lt;dbl&gt;         &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;   \n 1 Amar…           150          187        225           300 &lt;NA&gt;       crop    \n 2 Amar…           165          205        247           330 tiller     crop    \n 3 Anci…           550          687        825          1100 &lt;NA&gt;       crop    \n 4 Anci…           605          755        907          1210 tiller     crop    \n 5 Apple           100          125        150           200 &lt;NA&gt;       crop    \n 6 Apple           110          137        165           220 tiller     crop    \n 7 Apri…            50           62         75           100 &lt;NA&gt;       crop    \n 8 Apri…            55           68         82           110 tiller     crop    \n 9 Arti…           160          200        240           320 &lt;NA&gt;       crop    \n10 Arti…           176          220        264           352 tiller     crop    \n# ℹ 2 more variables: sub_category &lt;chr&gt;, sell_price &lt;dbl&gt;"
  }
]